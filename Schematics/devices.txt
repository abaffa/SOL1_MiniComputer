How can a process access IO devices?

there are two options apparently.

1) all IO goes through the kernel process. 
if a process wants to talk to an IO device, it requests a SYSCALL thatwill do the job.
the SYSCALL is a procedure that runs in the kernel process, and will talk to IO device for that process.
this means all devices are mapped at the kernel space.  this is the slower way of doing this.
lets say the process wants to talk to some IO port. say it wants to send a byte to an LED array at a certain address.
the kernel must have a SYSCALL that handles such a thing. this SYSCALL would take the byte from a register say,
and send it to the IO port. to do this, the CPU changes to kernel mode, the PC value is saved in the KSP.


2) the OS has a table somewhere that defines IO device space with their address ranges.
and a table relating processes to devices
a process sends a syscall to the kernel requesting device X
OS grants, which means it writes to that process' page table, mapping the device to part of it
so the process now has full access to the device.





(obs. the trace stuff can be done from inside the fetch routine.
example, if there is a status "trace_mode" flag, then after doing a fetch we can check that
flag and then diverge to the trace microcode. this saves time ans is faster than
having to check if trace is on from inside the DMA/INT/ conditionals.)

TRACE:
If the TRACE flag is on, then after each machine instruction, the microcode sequencer
diverges to a special area that allows the front panel to see the knob-selected register,
but also tri-states the buses. Then goes into a loop waiting for a press of the "trace continue"
button. It's basically the same as DMA, but activated automatically after each machine instruction
if the TRACE flag is on.

However careful consideration  must be given to its implementation otherwise things can go wrong.

ACTIVATION:
a dedicated instruction must activate trace mode. this is needed because a general flag update
has as its last microcode type as "pre-fetch". the problem is that the interruption
microcode handler probably gives priority to interrupts rather than TRACE, so that after updating the
TRACE flag, if interrupts are pending, then instead of jumping to the TRACE loop, the microcode will
jump to the interrupts handler instead. A dedicated instruction can make sure to jump to the TRACE
loop directly as that can be done by an "offset" microcode type.


definions: INTERRUPTION = trace, DMA or interrupts; INTERRUPT: a real external interrupt.

TRACE_CONTINUE button press:
When inside the TRACE loop, it is necessary to exit the loop as soon as TRACE_CONTINUE is
pressed. This is done by checking inside the loop for the TRACE_CONTINUE conditional.
If the condition is true, then we must exit the loop. before exiting the loop, we
must turn the trace_mode flag off, so that when meeting the pre_fetch microcode
we do not automatically jump back to the trace loop. simply turning the trace_mode flag
off will solve this.



AFTER EXECUTING INSTRUCTION:
When trace mode is on, then after each instruction we must jump to the trace loop.
This is done from inside the fetch routine. so we first fetch an instruction, then
we jump to trace loop, and wait for trace_continue.







NEW IDEA FOR TRACE MODE: (probably outdated)
we need to be faster so instead of checking for trace all the time an inerruption
occurs, we should add a new multiplexer to the U_TRAP input of the u-address multiplexer.
This plexer will select between a u-address for trace mode, and the normal interruption address.
This way if trace mode is on, we radily jump to the trace microcode, and if trace is off, we just
jump to the usual interruption microcode, which tests for either interrupts or DMA_REQ.





























 