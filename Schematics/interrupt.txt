I have a mask register for interrupts. I can disable them individually.

What I was thinking is this. I could use this mask register to deal with nesting of ints.

My interrupts are prioritized via a 148, so I can guarantee only the highest bid will win.

However, suppose then we are currently executing interrupt 4. Well, upon entering it,
interrupts will be disabled by microcode. Then the code inside the interrupt does the
following, it pushes the previous MASK register into the kernel stack. Then it writes in
a new mask, such that all interrupts below itself (and including itself) are blocked.
Then it enabled interrupts again! The if any higher priority interrupts happen, it will repeat.

Just before leaving an interrupt, the routine pop the mask flags, and executes an IRET.

I think this solves the problem in software in a nice way.







INTERRUPT:
save int vector
clear interrupt flipflop
save status flags register
set mode = kernel
push flags
push PC
push status flags
jump to ISR

IRET:
pop status flags to TEMP register (so that MODE is not yet changed back)
pop PC
pop arithmetic flags
move TEMP to status flags (so that MODE is restored)


INSIDE INTERRUPT:
push MASK register
change MASK so that lower priority interrupts  get blocked
enable interrupts
execute code
restore MASK register
return with IRET

FAULTs:
CPU checks if fault condition is reached inside microcode instruction
if condition is met, CPU restores PC back to initial position so instruction can be re-executed
then following steps are taken:

disable all interrupts	
save aux flags register
set mode = kernel
push flags
push PC
push aux flags
load PC with FAULT code and jump

INSIDE FAULT:
execute fault code
execute IRET


SYSCALL:
save aux flags register
set mode = kernel
push flags
push PC
push aux flags
form SYSCALL address by loading immediate byte
jump to SYSCALL code

execute SYSCALL
interrupts can either be enabled or disabled by the SYSCALL code
if interrupt happens, it gets executed as normal
after code executed, do IRET

















