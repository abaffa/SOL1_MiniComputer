0001   0000             .include bios.exp
0001+  0000             bkpt             .EQU  $0000
0002+  0000             ide_serv         .EQU  $0004
0003+  0000             kernel_serv      .EQU  $0001
0004+  0000             misc             .EQU  $0008
0005+  0000             print_u16x       .EQU  $0005
0006+  0000             rtc_serv         .EQU  $0002
0007+  0000             scan_u16x        .EQU  $0006
0008+  0000             uart_serv        .EQU  $0003
0009+  0000             xput_u8          .EQU  $0007
0002   8000             .org $8000
0003   8000             
0004   8000             
0005   8000             
0006   8000             
0007   8000             mem_dump:
0008   8000 07 74 82    	call get_token
0009   8003 3B 72 80    	mov d, token_str
0010   8006 07 A1 82    	call strtoint
0011   8009             mem_dump_short:
0012   8009 07 CC 82    	call put_nl
0013   800C 3C          	mov d, a				; dump pointer in d
0014   800D 38 00 00    	mov c, 0
0015   8010             dump_loop:
0016   8010 84          	mov al, cl
0017   8011 87 0F       	and al, $0F
0018   8013 C6 5F 80    	jz print_base
0019   8016             back:
0020   8016 1E          	mov al, [d]				; read byte
0021   8017 2F          	mov bl, al
0022   8018 05 07       	syscall xput_u8
0023   801A 10 01 20    	mov a, $2001
0024   801D 05 03       	syscall uart_serv			; space
0025   801F 84          	mov al, cl
0026   8020 87 0F       	and al, $0F
0027   8022 B9 0F       	cmp al, $0F
0028   8024 C6 33 80    	je print_ascii
0029   8027             back1:
0030   8027 79          	inc d
0031   8028 78          	inc c
0032   8029 C2 00 02    	cmp c, 512
0033   802C C7 10 80    	jne dump_loop
0034   802F 07 CC 82    	call put_nl
0035   8032 09          	ret
0036   8033             print_ascii:
0037   8033             	
0038   8033 10 01 20    	mov a, $2001
0039   8036 05 03       	syscall uart_serv
0040   8038 63 10 00    	sub d, 16
0041   803B 26 10 00    	mov b, 16
0042   803E             print_ascii_L:
0043   803E 79          	inc d
0044   803F 1E          	mov al, [d]				; read byte
0045   8040 B9 20       	cmp al, $20
0046   8042 C8 4A 80    	jlu dot
0047   8045 B9 7E       	cmp al, $7E
0048   8047 D0 53 80    	jleu ascii
0049   804A             dot:
0050   804A 22 2E       	mov ah, '.'
0051   804C 19 01       	mov al, 1
0052   804E 05 03       	syscall uart_serv
0053   8050 0A 58 80    	jmp ascii_continue
0054   8053             ascii:
0055   8053 23          	mov ah, al
0056   8054 19 01       	mov al, 1
0057   8056 05 03       	syscall uart_serv
0058   8058             ascii_continue:
0059   8058 FD A9 3E 80 	loopb print_ascii_L
0060   805C 0A 27 80    	jmp back1
0061   805F             print_base:
0062   805F 07 CC 82    	call put_nl
0063   8062 2D          	mov b, d
0064   8063 05 05       	syscall print_u16x				; display row
0065   8065 10 01 3A    	mov a, $3A01
0066   8068 05 03       	syscall uart_serv
0067   806A 10 01 20    	mov a, $2001
0068   806D 05 03       	syscall uart_serv
0069   806F 0A 16 80    	jmp back
0070   8072             	
0071   8072             	
0072   8072             	
0073   8072             	
0074   8072             	
0075   8072             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0076   8072             ;; SHELL DATA
0077   8072             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0078   8072 00 00 00 00 token_str:	.fill 256, 0
0078   8076 00 00 00 00 
0078   807A 00 00 00 00 
0078   807E 00 00 00 00 
0078   8082 00 00 00 00 
0078   8086 00 00 00 00 
0078   808A 00 00 00 00 
0078   808E 00 00 00 00 
0078   8092 00 00 00 00 
0078   8096 00 00 00 00 
0078   809A 00 00 00 00 
0078   809E 00 00 00 00 
0078   80A2 00 00 00 00 
0078   80A6 00 00 00 00 
0078   80AA 00 00 00 00 
0078   80AE 00 00 00 00 
0078   80B2 00 00 00 00 
0078   80B6 00 00 00 00 
0078   80BA 00 00 00 00 
0078   80BE 00 00 00 00 
0078   80C2 00 00 00 00 
0078   80C6 00 00 00 00 
0078   80CA 00 00 00 00 
0078   80CE 00 00 00 00 
0078   80D2 00 00 00 00 
0078   80D6 00 00 00 00 
0078   80DA 00 00 00 00 
0078   80DE 00 00 00 00 
0078   80E2 00 00 00 00 
0078   80E6 00 00 00 00 
0078   80EA 00 00 00 00 
0078   80EE 00 00 00 00 
0078   80F2 00 00 00 00 
0078   80F6 00 00 00 00 
0078   80FA 00 00 00 00 
0078   80FE 00 00 00 00 
0078   8102 00 00 00 00 
0078   8106 00 00 00 00 
0078   810A 00 00 00 00 
0078   810E 00 00 00 00 
0078   8112 00 00 00 00 
0078   8116 00 00 00 00 
0078   811A 00 00 00 00 
0078   811E 00 00 00 00 
0078   8122 00 00 00 00 
0078   8126 00 00 00 00 
0078   812A 00 00 00 00 
0078   812E 00 00 00 00 
0078   8132 00 00 00 00 
0078   8136 00 00 00 00 
0078   813A 00 00 00 00 
0078   813E 00 00 00 00 
0078   8142 00 00 00 00 
0078   8146 00 00 00 00 
0078   814A 00 00 00 00 
0078   814E 00 00 00 00 
0078   8152 00 00 00 00 
0078   8156 00 00 00 00 
0078   815A 00 00 00 00 
0078   815E 00 00 00 00 
0078   8162 00 00 00 00 
0078   8166 00 00 00 00 
0078   816A 00 00 00 00 
0078   816E 00 00 00 00 
0079   8172 00 00 00 00 expr:		.fill 256, 0
0079   8176 00 00 00 00 
0079   817A 00 00 00 00 
0079   817E 00 00 00 00 
0079   8182 00 00 00 00 
0079   8186 00 00 00 00 
0079   818A 00 00 00 00 
0079   818E 00 00 00 00 
0079   8192 00 00 00 00 
0079   8196 00 00 00 00 
0079   819A 00 00 00 00 
0079   819E 00 00 00 00 
0079   81A2 00 00 00 00 
0079   81A6 00 00 00 00 
0079   81AA 00 00 00 00 
0079   81AE 00 00 00 00 
0079   81B2 00 00 00 00 
0079   81B6 00 00 00 00 
0079   81BA 00 00 00 00 
0079   81BE 00 00 00 00 
0079   81C2 00 00 00 00 
0079   81C6 00 00 00 00 
0079   81CA 00 00 00 00 
0079   81CE 00 00 00 00 
0079   81D2 00 00 00 00 
0079   81D6 00 00 00 00 
0079   81DA 00 00 00 00 
0079   81DE 00 00 00 00 
0079   81E2 00 00 00 00 
0079   81E6 00 00 00 00 
0079   81EA 00 00 00 00 
0079   81EE 00 00 00 00 
0079   81F2 00 00 00 00 
0079   81F6 00 00 00 00 
0079   81FA 00 00 00 00 
0079   81FE 00 00 00 00 
0079   8202 00 00 00 00 
0079   8206 00 00 00 00 
0079   820A 00 00 00 00 
0079   820E 00 00 00 00 
0079   8212 00 00 00 00 
0079   8216 00 00 00 00 
0079   821A 00 00 00 00 
0079   821E 00 00 00 00 
0079   8222 00 00 00 00 
0079   8226 00 00 00 00 
0079   822A 00 00 00 00 
0079   822E 00 00 00 00 
0079   8232 00 00 00 00 
0079   8236 00 00 00 00 
0079   823A 00 00 00 00 
0079   823E 00 00 00 00 
0079   8242 00 00 00 00 
0079   8246 00 00 00 00 
0079   824A 00 00 00 00 
0079   824E 00 00 00 00 
0079   8252 00 00 00 00 
0079   8256 00 00 00 00 
0079   825A 00 00 00 00 
0079   825E 00 00 00 00 
0079   8262 00 00 00 00 
0079   8266 00 00 00 00 
0079   826A 00 00 00 00 
0079   826E 00 00 00 00 
0080   8272 72 81       expr_ptr:	.dw expr
0081   8274             
0082   8274             get_token:
0083   8274 14 72 82    	mov a, [expr_ptr]
0084   8277 4D          	mov si, a
0085   8278 FD 4F 72 80 	mov di, token_str
0086   827C             skip_spaces:
0087   827C F6          	lodsb
0088   827D B9 20       	cmp al, ' '
0089   827F C6 7C 82    	je skip_spaces
0090   8282             get_alpha:
0091   8282 07 DB 82    	call isalpha				;check if is alpha
0092   8285 C6 9C 82    	jz is_alphanumeric
0093   8288 07 F5 82    	call isnumeric			;check if is alpha
0094   828B C6 9C 82    	jz is_alphanumeric
0095   828E             not_alpha:
0096   828E FC 00 00    	lea d, [di+0]
0097   8291 19 00       	mov al, 0
0098   8293 3E          	mov [d], al
0099   8294             	
0100   8294 D5 01 00    	sub si, 1
0101   8297 4E          	mov a, si
0102   8298 42 72 82    	mov [expr_ptr], a		; update pointer
0103   829B             	
0104   829B 09          	ret
0105   829C             is_alphanumeric:
0106   829C F7          	stosb
0107   829D F6          	lodsb
0108   829E 0A 82 82    	jmp get_alpha
0109   82A1             	
0110   82A1             	
0111   82A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0112   82A1             ; strtoint
0113   82A1             ; 4 digit string number in d
0114   82A1             ; integer returned in A
0115   82A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116   82A1             strtoint:
0117   82A1 D8          	push b
0118   82A2 32          	mov bl, [d]
0119   82A3 37          	mov bh, bl
0120   82A4 33 01 00    	mov bl, [d + 1]
0121   82A7 07 0C 83    	call atoi				; convert to int in AL
0122   82AA 23          	mov ah, al				; move to AH	
0123   82AB 33 02 00    	mov bl, [d + 2]
0124   82AE 37          	mov bh, bl
0125   82AF 33 03 00    	mov bl, [d + 3]
0126   82B2 07 0C 83    	call atoi				; convert to int in AL
0127   82B5 E5          	pop b	
0128   82B6             	
0129   82B6             	
0130   82B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0131   82B6             ; PRINT NULL TERMINATED STRING
0132   82B6             ; pointer in D
0133   82B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134   82B6             puts:
0135   82B6 E1          	pushf
0136   82B7 D7          	push a
0137   82B8 DA          	push d
0138   82B9             puts_L1:
0139   82B9 1E          	mov al, [d]
0140   82BA B9 00       	cmp al, 0
0141   82BC C6 C8 82    	jz puts_END
0142   82BF 23          	mov ah, al
0143   82C0 19 01       	mov al, 1
0144   82C2 05 03       	syscall uart_serv
0145   82C4 79          	inc d	
0146   82C5 0A B9 82    	jmp puts_L1
0147   82C8             puts_END:
0148   82C8 E7          	pop d
0149   82C9 E4          	pop a
0150   82CA EE          	popf
0151   82CB 09          	ret
0152   82CC             
0153   82CC             
0154   82CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0155   82CC             ; PRINT NEW LINE
0156   82CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0157   82CC             put_nl:
0158   82CC E1          	pushf
0159   82CD D7          	push a
0160   82CE 10 01 0A    	mov a, $0A01
0161   82D1 05 03       	syscall uart_serv
0162   82D3 10 01 0D    	mov a, $0D01
0163   82D6 05 03       	syscall uart_serv
0164   82D8 E4          	pop a
0165   82D9 EE          	popf
0166   82DA 09          	ret	
0167   82DB             	
0168   82DB             	
0169   82DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0170   82DB             ;; IS ALPHA
0171   82DB             ;; sets ZF according with result
0172   82DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0173   82DB             isalpha:
0174   82DB DB          	push al
0175   82DC 07 1E 83    	call to_lower
0176   82DF B9 61       	cmp al, 'a'
0177   82E1 C8 EF 82    	jlu isalpha_false
0178   82E4 B9 7A       	cmp al, 'z'
0179   82E6 D1 EF 82    	jgu isalpha_false
0180   82E9 0E          	lodflgs
0181   82EA 8B 01       	or al, %00000001
0182   82EC 0F          	stoflgs
0183   82ED E8          	pop al
0184   82EE 09          	ret
0185   82EF             isalpha_false:
0186   82EF 0E          	lodflgs
0187   82F0 87 FE       	and al, %11111110
0188   82F2 0F          	stoflgs
0189   82F3 E8          	pop al
0190   82F4 09          	ret
0191   82F5             	
0192   82F5             
0193   82F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0194   82F5             ;; IS NUMERIC
0195   82F5             ;; sets ZF according with result
0196   82F5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0197   82F5             isnumeric:
0198   82F5 DB          	push al
0199   82F6 B9 30       	cmp al, '0'
0200   82F8 C8 06 83    	jlu isnumeric_false
0201   82FB B9 39       	cmp al, '9'
0202   82FD D1 06 83    	jgu isnumeric_false
0203   8300 0E          	lodflgs
0204   8301 8B 01       	or al, %00000001
0205   8303 0F          	stoflgs
0206   8304 E8          	pop al
0207   8305 09          	ret
0208   8306             isnumeric_false:
0209   8306 0E          	lodflgs
0210   8307 87 FE       	and al, %11111110
0211   8309 0F          	stoflgs
0212   830A E8          	pop al
0213   830B 09          	ret	
0214   830C             	
0215   830C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0216   830C             ; ATOI
0217   830C             ; 2 letter hex string in B
0218   830C             ; 8bit integer returned in AL
0219   830C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220   830C             atoi:
0221   830C E1          	pushf
0222   830D D8          	push b
0223   830E             	
0224   830E 07 28 83    	call hex_ascii_encode			; convert BL to 4bit code in AL
0225   8311 30          	mov bl, bh
0226   8312 DB          	push al					; save a
0227   8313 07 28 83    	call hex_ascii_encode
0228   8316 EA          	pop bl	
0229   8317 FD 9E 04    	shl al, 4
0230   831A 8C          	or al, bl
0231   831B             	
0232   831B E5          	pop b
0233   831C EE          	popf
0234   831D 09          	ret	
0235   831E             	
0236   831E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0237   831E             ; TO LOWER
0238   831E             ; input in AL
0239   831E             ; output in AL
0240   831E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0241   831E             to_lower:
0242   831E E1          	pushf
0243   831F B9 5A       	cmp al, 'Z'
0244   8321 D1 26 83    	jgu to_lower_ret
0245   8324 6A 20       	add al, $20				; convert to lower case
0246   8326             to_lower_ret:
0247   8326 EE          	popf
0248   8327 09          	ret
0249   8328             	
0250   8328             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0251   8328             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0252   8328             ; ASCII in BL
0253   8328             ; result in AL
0254   8328             ; ascii for F = 0100 0110
0255   8328             ; ascii for 9 = 0011 1001
0256   8328             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0257   8328             hex_ascii_encode:
0258   8328 1B          	mov al, bl
0259   8329 93 40       	test al, 40h				; test if letter or number
0260   832B C7 31 83    	jnz hex_letter
0261   832E 87 0F       	and al, 0Fh				; get number
0262   8330 09          	ret
0263   8331             hex_letter:
0264   8331 87 0F       	and al, 0Fh				; get letter
0265   8333 6A 09       	add al, 9
0266   8335 09          	ret
0267   8336             	
0268   8336             .endtasm: Number of errors = 0
