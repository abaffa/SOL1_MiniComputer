0001   0000             .include bios.exp
0001+  0000             bkpt             .EQU  $0000
0002+  0000             ide_serv         .EQU  $0004
0003+  0000             kernel_serv      .EQU  $0001
0004+  0000             misc             .EQU  $0008
0005+  0000             print_u16x       .EQU  $0005
0006+  0000             rtc_serv         .EQU  $0002
0007+  0000             scan_u16x        .EQU  $0006
0008+  0000             uart_serv        .EQU  $0003
0009+  0000             xput_u8          .EQU  $0007
0002   4000             .org $4000
0003   4000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   4000             ; MATHEMATICS MENU
0005   4000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0006   4000             _math_menu:
0007   4000 F8 00 02    	enter 512
0008   4003             print_math_menu:
0009   4003 3B 45 43    	mov d, s_math_menu
0010   4006 07 D6 40    	call puts	
0011   4009             __get_math_choice:
0012   4009 FA 01 FE    	lea d, [bp +- 511]
0013   400C 07 EC 40    	call gets						; get choice
0014   400F 1E          	mov al, [d]
0015   4010 B9 3F       	cmp al, '?'
0016   4012 C6 03 40    	je print_math_menu
0017   4015 6F 30       	sub al, 30h
0018   4017 B9 02       	cmp al, 2
0019   4019 C6 2E 40    	je _math_quit
0020   401C D1 09 40    	jgu __get_math_choice				; check bounds
0021   401F FD 9E 01    	shl al, 1
0022   4022 22 00       	mov ah, 0
0023   4024 FD 07 30 40 	call [a + __math_menu_jump_table]
0024   4028             
0025   4028 07 0A 41    	call put_nl
0026   402B 0A 09 40    	jmp __get_math_choice
0027   402E             _math_quit:
0028   402E F9          	leave
0029   402F 09          	ret
0030   4030             
0031   4030             ; ***********************************************************************************
0032   4030             ; MATHS JUMP TABLE
0033   4030             ; ***********************************************************************************
0034   4030             __math_menu_jump_table:
0035   4030 34 40       	.dw automaton
0036   4032 BE 40       	.dw chg_rules
0037   4034             	
0038   4034             automaton:
0039   4034 FD 0D       	cli
0040   4036 F8 02 00    	enter 2
0041   4039 3B 76 41    	mov d, s_steps
0042   403C 07 D6 40    	call puts
0043   403F 07 19 41    	call scan_u16d
0044   4042 45 FF FF    	mov [bp +- 1], a
0045   4045 07 0A 41    	call put_nl
0046   4048             ; reset initial state
0047   4048 FD 4D 80 41 	mov si, init_state
0048   404C FD 4F EF 41 	mov di, prev_state
0049   4050 38 6F 00    	mov c, 111
0050   4053 FD F5       	rep movsb	
0051   4055             auto_L1:
0052   4055 38 01 00    	mov c, 1	
0053   4058 17 FF FF    	mov a, [bp + -1]
0054   405B AF 00 00    	cmp a, 0
0055   405E C6 BA 40    	je automaton_ret
0056   4061 7D          	dec a
0057   4062 45 FF FF    	mov [bp + -1], a
0058   4065             auto_L2:	
0059   4065 12          	mov a, c
0060   4066 3C          	mov d, a
0061   4067 FD 10       	clra
0062   4069 79          	inc d
0063   406A 33 EF 41    	mov bl, [d + prev_state]
0064   406D 6B          	add al, bl
0065   406E 7F          	dec d
0066   406F 33 EF 41    	mov bl, [d + prev_state]
0067   4072             	
0068   4072 FD A0 01    	shl bl, 1
0069   4075 6B          	add al, bl
0070   4076 7F          	dec d
0071   4077 33 EF 41    	mov bl, [d + prev_state]
0072   407A FD A0 02    	shl bl, 2
0073   407D 6B          	add al, bl					; now al has the number for the table
0074   407E             	
0075   407E B7 3D 43    	mov a, [a + automaton_table]
0076   4081 79          	inc d
0077   4082 3F 5E 42    	mov [d + state], al
0078   4085 78          	inc c
0079   4086 C2 6E 00    	cmp c, 110
0080   4089 C8 65 40    	jlu auto_L2
0081   408C             	
0082   408C             ; here we finished updating the current state, now we copy the current state to
0083   408C             ; the previous state
0084   408C FD 4D 5E 42 	mov si, state
0085   4090 FD 4F EF 41 	mov di, prev_state
0086   4094 38 6F 00    	mov c, 111
0087   4097 FD F5       	rep movsb
0088   4099             	
0089   4099             ; now print the current state on the screen
0090   4099 FD 4D 5E 42 	mov si, state
0091   409D FD 4F CD 42 	mov di, state_chars
0092   40A1 38 6F 00    	mov c, 111
0093   40A4             state_convert_loop:
0094   40A4 F6          	lodsb
0095   40A5 22 00       	mov ah, 0
0096   40A7 B7 7E 41    	mov a, [a + table_translate]
0097   40AA F7          	stosb
0098   40AB A9 A4 40    	loopc state_convert_loop
0099   40AE             	
0100   40AE 3B CD 42    	mov d, state_chars
0101   40B1 07 D6 40    	call puts
0102   40B4             	
0103   40B4 07 0A 41    	call put_nl
0104   40B7 0A 55 40    	jmp auto_L1	
0105   40BA             automaton_ret:
0106   40BA F9          	leave
0107   40BB FD 0C       	sti
0108   40BD 09          	ret
0109   40BE             	
0110   40BE             chg_rules:
0111   40BE 3B 6F 41    	mov d, s_rule
0112   40C1 07 D6 40    	call puts
0113   40C4 3B 00 00    	mov d, 0
0114   40C7 38 04 00    	mov c, 4
0115   40CA             chg_rule_L1:
0116   40CA 05 06       	syscall scan_u16x
0117   40CC 44 3D 43    	mov [d + automaton_table], a
0118   40CF 58 02 00    	add d, 2
0119   40D2 A9 CA 40    	loopc chg_rule_L1
0120   40D5 09          	ret
0121   40D6             	
0122   40D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123   40D6             ; PRINT NULL TERMINATED STRING
0124   40D6             ; pointer in D
0125   40D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0126   40D6             puts:
0127   40D6 E1          	pushf
0128   40D7 D7          	push a
0129   40D8 DA          	push d
0130   40D9             puts_L1:
0131   40D9 1E          	mov al, [d]
0132   40DA B9 00       	cmp al, 0
0133   40DC C6 E8 40    	jz puts_END
0134   40DF 23          	mov ah, al
0135   40E0 19 01       	mov al, 1
0136   40E2 05 03       	syscall uart_serv
0137   40E4 79          	inc d	
0138   40E5 0A D9 40    	jmp puts_L1
0139   40E8             puts_END:
0140   40E8 E7          	pop d
0141   40E9 E4          	pop a
0142   40EA EE          	popf
0143   40EB 09          	ret
0144   40EC             
0145   40EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0146   40EC             ;; INPUT A STRING
0147   40EC             ;; terminates with null
0148   40EC             ;; pointer in D
0149   40EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0150   40EC             gets:
0151   40EC E1          	pushf
0152   40ED D7          	push a
0153   40EE DA          	push d
0154   40EF             gets_loop:
0155   40EF 19 03       	mov al, 3
0156   40F1 05 03       	syscall uart_serv			; receive in AH
0157   40F3 76 0A       	cmp ah, 0Ah				; cr
0158   40F5 C6 03 41    	je gets_end
0159   40F8 76 0D       	cmp ah, 0Dh				; cr
0160   40FA C6 03 41    	je gets_end
0161   40FD 1A          	mov al, ah
0162   40FE 3E          	mov [d], al
0163   40FF 79          	inc d
0164   4100 0A EF 40    	jmp gets_loop
0165   4103             gets_end:
0166   4103 19 00       	mov al, 0
0167   4105 3E          	mov [d], al				; terminate string
0168   4106 E7          	pop d
0169   4107 E4          	pop a
0170   4108 EE          	popf
0171   4109 09          	ret
0172   410A             
0173   410A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0174   410A             ; PRINT NEW LINE
0175   410A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0176   410A             put_nl:
0177   410A E1          	pushf
0178   410B D7          	push a
0179   410C 10 01 0A    	mov a, $0A01
0180   410F 05 03       	syscall uart_serv
0181   4111 10 01 0D    	mov a, $0D01
0182   4114 05 03       	syscall uart_serv
0183   4116 E4          	pop a
0184   4117 EE          	popf
0185   4118 09          	ret
0186   4119             
0187   4119             
0188   4119             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0189   4119             ; input decimal number	
0190   4119             ; result in A
0191   4119             ; 655'\0'
0192   4119             ; low--------high
0193   4119             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0194   4119             scan_u16d:
0195   4119 F8 08 00    	enter 8
0196   411C E2          	push si
0197   411D D8          	push b
0198   411E D9          	push c
0199   411F DA          	push d
0200   4120             	
0201   4120 FA F9 FF    	lea d, [bp +- 7]
0202   4123 07 EC 40    	call gets
0203   4126 07 5D 41    	call strlen			; get string length in C
0204   4129 7E          	dec c	
0205   412A             	
0206   412A FD 4E       	mov si, d
0207   412C             	
0208   412C 12          	mov a, c
0209   412D FD 99       	shl a
0210   412F 3B 53 41    	mov d, table_power
0211   4132 59          	add d, a
0212   4133 38 00 00    	mov c, 0
0213   4136             mul_loop:
0214   4136 F6          	lodsb			; load ASCII to al
0215   4137 B9 00       	cmp al, 0
0216   4139 C6 4C 41    	je mul_exit
0217   413C 6F 30       	sub al, $30		; make into integer
0218   413E 22 00       	mov ah, 0
0219   4140 2A          	mov b, [d]
0220   4141 AC          	mul a, b			; result in B since it fits in 16bits
0221   4142 11          	mov a, b
0222   4143 28          	mov b, c
0223   4144 54          	add a, b
0224   4145 39          	mov c, a
0225   4146 63 02 00    	sub d, 2
0226   4149 0A 36 41    	jmp mul_loop
0227   414C             mul_exit:
0228   414C 12          	mov a, c
0229   414D E7          	pop d
0230   414E E6          	pop c
0231   414F E5          	pop b
0232   4150 EF          	pop si
0233   4151 F9          	leave
0234   4152 09          	ret
0235   4153             	
0236   4153             table_power:
0237   4153 01 00       	.dw 1
0238   4155 0A 00       	.dw 10
0239   4157 64 00       	.dw 100
0240   4159 E8 03       	.dw 1000
0241   415B 10 27       	.dw 10000
0242   415D             	
0243   415D             	
0244   415D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0245   415D             ; length of null terminated string
0246   415D             ; result in C
0247   415D             ; pointer in D
0248   415D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0249   415D             strlen:
0250   415D DA          	push d
0251   415E DB          	push al
0252   415F 38 00 00    	mov c, 0
0253   4162             strlen_L1:
0254   4162 BD 00       	cmp byte [d], 0
0255   4164 C6 6C 41    	je strlen_ret
0256   4167 79          	inc d
0257   4168 78          	inc c
0258   4169 0A 62 41    	jmp strlen_L1	
0259   416C             strlen_ret:
0260   416C E8          	pop al
0261   416D E7          	pop d
0262   416E 09          	ret	
0263   416F             	
0264   416F 52 75 6C 65 s_rule:		.db "Rule: ", 0
0264   4173 3A 20 00 
0265   4176 53 74 65 70 s_steps:		.db "Steps: ", 0
0265   417A 73 3A 20 00 
0266   417E             
0267   417E             table_translate:
0268   417E 20          	.db ' '
0269   417F 2A          	.db '*'
0270   4180             	
0271   4180 00 00 00 00 init_state: 	.fill 55, 0
0271   4184 00 00 00 00 
0271   4188 00 00 00 00 
0271   418C 00 00 00 00 
0271   4190 00 00 00 00 
0271   4194 00 00 00 00 
0271   4198 00 00 00 00 
0271   419C 00 00 00 00 
0271   41A0 00 00 00 00 
0271   41A4 00 00 00 00 
0271   41A8 00 00 00 00 
0271   41AC 00 00 00 00 
0271   41B0 00 00 00 00 
0271   41B4 00 00 00 
0272   41B7 01          			.db 1 
0273   41B8 00 00 00 00 			.fill 55, 0
0273   41BC 00 00 00 00 
0273   41C0 00 00 00 00 
0273   41C4 00 00 00 00 
0273   41C8 00 00 00 00 
0273   41CC 00 00 00 00 
0273   41D0 00 00 00 00 
0273   41D4 00 00 00 00 
0273   41D8 00 00 00 00 
0273   41DC 00 00 00 00 
0273   41E0 00 00 00 00 
0273   41E4 00 00 00 00 
0273   41E8 00 00 00 00 
0273   41EC 00 00 00 
0274   41EF             
0275   41EF 00 00 00 00 prev_state: 	.fill 55, 0
0275   41F3 00 00 00 00 
0275   41F7 00 00 00 00 
0275   41FB 00 00 00 00 
0275   41FF 00 00 00 00 
0275   4203 00 00 00 00 
0275   4207 00 00 00 00 
0275   420B 00 00 00 00 
0275   420F 00 00 00 00 
0275   4213 00 00 00 00 
0275   4217 00 00 00 00 
0275   421B 00 00 00 00 
0275   421F 00 00 00 00 
0275   4223 00 00 00 
0276   4226 01          			.db 1 
0277   4227 00 00 00 00 			.fill 55, 0
0277   422B 00 00 00 00 
0277   422F 00 00 00 00 
0277   4233 00 00 00 00 
0277   4237 00 00 00 00 
0277   423B 00 00 00 00 
0277   423F 00 00 00 00 
0277   4243 00 00 00 00 
0277   4247 00 00 00 00 
0277   424B 00 00 00 00 
0277   424F 00 00 00 00 
0277   4253 00 00 00 00 
0277   4257 00 00 00 00 
0277   425B 00 00 00 
0278   425E             		
0279   425E 00 00 00 00 state: 		.fill 111, 0
0279   4262 00 00 00 00 
0279   4266 00 00 00 00 
0279   426A 00 00 00 00 
0279   426E 00 00 00 00 
0279   4272 00 00 00 00 
0279   4276 00 00 00 00 
0279   427A 00 00 00 00 
0279   427E 00 00 00 00 
0279   4282 00 00 00 00 
0279   4286 00 00 00 00 
0279   428A 00 00 00 00 
0279   428E 00 00 00 00 
0279   4292 00 00 00 00 
0279   4296 00 00 00 00 
0279   429A 00 00 00 00 
0279   429E 00 00 00 00 
0279   42A2 00 00 00 00 
0279   42A6 00 00 00 00 
0279   42AA 00 00 00 00 
0279   42AE 00 00 00 00 
0279   42B2 00 00 00 00 
0279   42B6 00 00 00 00 
0279   42BA 00 00 00 00 
0279   42BE 00 00 00 00 
0279   42C2 00 00 00 00 
0279   42C6 00 00 00 00 
0279   42CA 00 00 00 
0280   42CD             
0281   42CD 20 20 20 20 state_chars:	.fill 111, ' '
0281   42D1 20 20 20 20 
0281   42D5 20 20 20 20 
0281   42D9 20 20 20 20 
0281   42DD 20 20 20 20 
0281   42E1 20 20 20 20 
0281   42E5 20 20 20 20 
0281   42E9 20 20 20 20 
0281   42ED 20 20 20 20 
0281   42F1 20 20 20 20 
0281   42F5 20 20 20 20 
0281   42F9 20 20 20 20 
0281   42FD 20 20 20 20 
0281   4301 20 20 20 20 
0281   4305 20 20 20 20 
0281   4309 20 20 20 20 
0281   430D 20 20 20 20 
0281   4311 20 20 20 20 
0281   4315 20 20 20 20 
0281   4319 20 20 20 20 
0281   431D 20 20 20 20 
0281   4321 20 20 20 20 
0281   4325 20 20 20 20 
0281   4329 20 20 20 20 
0281   432D 20 20 20 20 
0281   4331 20 20 20 20 
0281   4335 20 20 20 20 
0281   4339 20 20 20 
0282   433C 00          			.db 0
0283   433D             
0284   433D             automaton_table:
0285   433D 00          	.db 0		; 000
0286   433E 01          	.db 1		; 001
0287   433F 01          	.db 1		; 010
0288   4340 00          	.db 0		; 011
0289   4341 00          	.db 0		; 100
0290   4342 01          	.db 1		; 101
0291   4343 00          	.db 0		; 110
0292   4344 01          	.db 1		; 111
0293   4345             					
0294   4345             
0295   4345 30 2E 20 52 s_math_menu:		.db "0. Run\n\r"
0295   4349 75 6E 0A 0D 
0296   434D 31 2E 20 52 				.db "1. Rule\n\r"
0296   4351 75 6C 65 0A 
0296   4355 0D 
0297   4356 32 2E 20 51 				.db "2. Q\n\r", 0
0297   435A 0A 0D 00 
0298   435D             				
0299   435D             .endtasm: Number of errors = 0
