0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; SHELL
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             .include kernel.exp
0001+  0000             disk_buffer      .EQU  $1989
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide_kernel   .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_fileio       .EQU  $0004
0006+  0000             sys_fork         .EQU  $0005
0007+  0000             sys_fwb          .EQU  $0006
0008+  0000             sys_fwk          .EQU  $0007
0009+  0000             sys_ide          .EQU  $0008
0010+  0000             sys_en           .EQU  $0009
0011+  0000             sys_list         .EQU  $000a
0012+  0000             sys_primew       .EQU  $000b
0013+  0000             sys_primer       .EQU  $000c
0005   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006   0000             ; MEMORY MAP
0007   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008   0000             ; 0000		ROM BEGIN
0009   0000             ; ....
0010   0000             ; 7FFF		ROM END
0011   0000             ;
0012   0000             ; 8000		RAM begin
0013   0000             ; ....
0014   0000             ; F7FF		Stack root
0015   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0016   0000             ; I/O MAP
0017   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0018   0000             ; FF80		UART 0		(16550)
0019   0000             ; FF90		UART 1		(16550)
0020   0000             ; FFA0		RTC			(M48T02)
0021   0000             ; FFB0		PIO 0		(8255)
0022   0000             ; FFC0		PIO 1		(8255)
0023   0000             ; FFD0		IDE			(Compact Flash / PATA)
0024   0000             ; FFE0		Timer		(8253)
0025   0000             ; FFF0		BIOS CONFIGURATION NV-RAM STORE AREA
0026   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0027   0000             ; SYSTEM CONSTANTS / EQUATIONS
0028   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029   0000             
0030   0000             TOKTYP_IDENTIFIER			.equ 0
0031   0000             TOKTYP_KEYWORD			.equ 1
0032   0000             TOKTYP_DELIMITER			.equ 2
0033   0000             TOKTYP_STRING				.equ 3
0034   0000             TOKTYP_CHAR				.equ 4
0035   0000             TOKTYP_NUMERIC			.equ 5
0036   0000             
0037   0000             TOK_NULL					.equ 0
0038   0000             TOK_SLASH				.equ 1
0039   0000             TOK_TIMES 				.equ 2
0040   0000             TOK_PLUS 				.equ 3
0041   0000             TOK_MINUS 				.equ 4
0042   0000             TOK_DASH					.equ 4
0043   0000             TOK_OTHER				.equ 5
0044   0000             TOK_DOT					.equ 6
0045   0000             TOK_DDOT					.equ 7
0046   0000             
0047   0000             TOK_END					.equ 15
0048   0000             
0049   0000             
0050   0000             _STACK_BEGIN				.equ $F7FF				; beginning of stack
0051   0000             
0052   0000             _NULL					.equ 0
0053   0000             
0054   0000             	
0055   0000             SHELL_RESET_VECTOR:	
0056   0000 FD 49 FF F7 	mov bp, _STACK_BEGIN
0057   0004 FD 47 FF F7 	mov sp, _STACK_BEGIN
0058   0008             
0059   0008 3B 24 0C    	mov d, s_welcome
0060   000B 07 97 02    	call puts
0061   000E             	
0062   000E 07 11 00    	call shell			; this is the main shell procedure. the shell will loop here
0063   0011             	
0064   0011             	
0065   0011             shell:
0066   0011             shell_L1:
0067   0011 FD 0C       	sti
0068   0013 F2 9F 06 00 	mov byte [token_str], 0			; clear token_str (so that enter doesnt repeat last shell command)
0069   0017 19 0D       	mov al, 13
0070   0019 05 04       	syscall sys_fileio
0071   001B             	
0072   001B 3B 9F 07    	mov d, shell_input_buff
0073   001E 13          	mov a, d
0074   001F 42 9F 08    	mov [shell_buff_ptr], a
0075   0022 07 D5 01    	call gets
0076   0025 07 DE 03    	call get_token					; get command into token_str
0077   0028 FD 4F E3 09 	mov di, keywords
0078   002C             shell_L2:	
0079   002C E3          	push di
0080   002D D4 02 00    	add di, 2
0081   0030 10 9F 06    	mov a, token_str
0082   0033 4D          	mov si, a
0083   0034 07 D7 00    	call strcmp
0084   0037 F0          	pop di
0085   0038 C6 4C 00    	je cmd_equal	
0086   003B D4 0A 00    	add di, 10
0087   003E DA          	push d
0088   003F FC 00 00    	lea d, [di + 0]
0089   0042 1E          	mov al, [d]
0090   0043 B9 00       	cmp al, 0
0091   0045 E7          	pop d
0092   0046 C6 56 00    	je cmd_not_found
0093   0049 0A 2C 00    	jmp shell_L2
0094   004C             cmd_equal:
0095   004C DA          	push d
0096   004D             	
0097   004D 50          	mov a, di
0098   004E FD 07 00 00 	call [a+0]
0099   0052 E7          	pop d
0100   0053 0A 11 00    	jmp shell_L1
0101   0056             cmd_not_found:
0102   0056 07 21 02    	call printnl
0103   0059 07 7B 06    	call cmd_exec
0104   005C 0A 11 00    	jmp shell_L1
0105   005F             
0106   005F             
0107   005F             cmd_test:
0108   005F 38 64 00    	mov c, 100
0109   0062             cmd_test_L0:
0110   0062 FD 0C       	sti
0111   0064 7E          	dec c
0112   0065 C2 00 00    	cmp c, 0
0113   0068 C7 62 00    	jne cmd_test_L0
0114   006B 09          	ret
0115   006C             
0116   006C             
0117   006C             cmd_primer:
0118   006C 07 21 02    	call printnl
0119   006F 05 0C       	syscall sys_primer
0120   0071 07 21 02    	call printnl
0121   0074 09          	ret
0122   0075             
0123   0075             cmd_ps:
0124   0075 07 21 02    	call printnl
0125   0078 05 0A       	syscall sys_list
0126   007A 09          	ret
0127   007B             
0128   007B             cmd_en:
0129   007B             
0130   007B 05 09       	syscall sys_en
0131   007D 09          	ret
0132   007E             
0133   007E             cmd_fork:
0134   007E 07 21 02    	call printnl
0135   0081 05 05       	syscall sys_fork
0136   0083 09          	ret
0137   0084             
0138   0084             cmd_fwb:
0139   0084 05 06       	syscall sys_fwb
0140   0086 09          	ret
0141   0087             	
0142   0087             cmd_fwk:
0143   0087 05 07       	syscall sys_fwk
0144   0089 09          	ret
0145   008A             	
0146   008A             	
0147   008A             loader:
0148   008A 07 DE 03    	call get_token
0149   008D 3B 9F 06    	mov d, token_str
0150   0090 07 81 02    	call strtoint
0151   0093             	
0152   0093 FD 78       	mov g, a
0153   0095 3B 63 0B    	mov d, s_dataentry
0154   0098 07 97 02    	call puts
0155   009B 4F          	mov di, a					; save destiny
0156   009C 07 24 01    	call _load_hex
0157   009F 07 21 02    	call printnl
0158   00A2 09          	ret
0159   00A3             	
0160   00A3             loadcall:
0161   00A3 07 DE 03    	call get_token
0162   00A6 3B 9F 06    	mov d, token_str
0163   00A9 07 81 02    	call strtoint
0164   00AC             	
0165   00AC 42 C1 00    	mov [addr1], a			; save address
0166   00AF 3B 63 0B    	mov d, s_dataentry
0167   00B2 07 97 02    	call puts
0168   00B5 4F          	mov di, a					; save destiny
0169   00B6 07 24 01    	call _load_hex
0170   00B9 07 21 02    	call printnl
0171   00BC             
0172   00BC 14 C1 00    	mov a, [addr1]			; retrieve address
0173   00BF             	
0174   00BF 08          	call a
0175   00C0 09          	ret
0176   00C1             	
0177   00C1 00 00       addr1: .dw 0
0178   00C3             		
0179   00C3             ;******************************************************************************
0180   00C3             
0181   00C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0182   00C3             ; strstr
0183   00C3             ; find sub-string
0184   00C3             ; str1 in SI
0185   00C3             ; str2 in DI
0186   00C3             ; SI points to end of source string
0187   00C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0188   00C3             strstr:
0189   00C3 DB          	push al
0190   00C4 DA          	push d
0191   00C5 E3          	push di
0192   00C6             strstr_loop:	
0193   00C6 F3          	cmpsb					; compare a byte of the strings
0194   00C7 C7 D3 00    	jne strstr_ret
0195   00CA FC 00 00    	lea d, [di + 0]
0196   00CD 1E          	mov al, [d]
0197   00CE B9 00       	cmp al, 0				; check if at end of string (null)
0198   00D0 C7 C6 00    	jne strstr_loop				; equal chars but not at end
0199   00D3             strstr_ret:
0200   00D3 F0          	pop di
0201   00D4 E7          	pop d
0202   00D5 E8          	pop al				
0203   00D6 09          	ret
0204   00D7             
0205   00D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0206   00D7             ; STRCMP
0207   00D7             ; compare two strings
0208   00D7             ; str1 in SI
0209   00D7             ; str2 in DI
0210   00D7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0211   00D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212   00D7             strcmp:
0213   00D7 DB          	push al
0214   00D8 DA          	push d
0215   00D9 E3          	push di
0216   00DA E2          	push si
0217   00DB             strcmp_loop:	
0218   00DB F3          	cmpsb					; compare a byte of the strings
0219   00DC C7 E8 00    	jne strcmp_ret
0220   00DF FB FF FF    	lea d, [si +- 1]
0221   00E2 1E          	mov al, [d]
0222   00E3 B9 00       	cmp al, 0				; check if at end of string (null)
0223   00E5 C7 DB 00    	jne strcmp_loop				; equal chars but not at end
0224   00E8             strcmp_ret:
0225   00E8 EF          	pop si
0226   00E9 F0          	pop di
0227   00EA E7          	pop d
0228   00EB E8          	pop al				
0229   00EC 09          	ret
0230   00ED             
0231   00ED             call_address:
0232   00ED 07 DE 03    	call get_token
0233   00F0 3B 9F 06    	mov d, token_str
0234   00F3 07 81 02    	call strtoint
0235   00F6             	
0236   00F6 08          	call a
0237   00F7 09          	ret
0238   00F8             
0239   00F8             ; STRCPY
0240   00F8             ; copy null terminated string from SI to DI
0241   00F8             ; source in SI
0242   00F8             ; destination in DI
0243   00F8             strcpy:
0244   00F8 E2          	push si
0245   00F9 E3          	push di
0246   00FA DB          	push al
0247   00FB             strcpy_L1:
0248   00FB F6          	lodsb
0249   00FC F7          	stosb
0250   00FD B9 00       	cmp al, 0
0251   00FF C7 FB 00    	jne strcpy_L1	
0252   0102             strcpy_end:
0253   0102 E8          	pop al
0254   0103 F0          	pop di
0255   0104 EF          	pop si
0256   0105 09          	ret
0257   0106             	
0258   0106             ; STRCAT
0259   0106             ; concatenate a NULL terminated string into string at DI, from string at SI
0260   0106             ; source in SI
0261   0106             ; destination in DI
0262   0106             strcat:
0263   0106 E2          	push si
0264   0107 E3          	push di
0265   0108 DB          	push al
0266   0109 DA          	push d
0267   010A 50          	mov a, di
0268   010B 3C          	mov d, a
0269   010C             strcat_goto_end_L1:
0270   010C 1E          	mov al, [d]
0271   010D B9 00       	cmp al, 0
0272   010F C6 16 01    	je strcat_start
0273   0112 79          	inc d
0274   0113 0A 0C 01    	jmp strcat_goto_end_L1
0275   0116             strcat_start:
0276   0116 FD 50       	mov di, d
0277   0118             strcat_L1:
0278   0118 F6          	lodsb
0279   0119 F7          	stosb
0280   011A B9 00       	cmp al, 0
0281   011C C7 18 01    	jne strcat_L1	
0282   011F             strcat_end:
0283   011F E7          	pop d
0284   0120 E8          	pop al
0285   0121 F0          	pop di
0286   0122 EF          	pop si
0287   0123 09          	ret
0288   0124             	
0289   0124             ; ************************************************************
0290   0124             ; GET HEX FILE
0291   0124             ; di = destination address
0292   0124             ; return length in bytes in C
0293   0124             ; ************************************************************
0294   0124             _load_hex:
0295   0124 D2          	push bp
0296   0125 9B          	mov bp, sp
0297   0126 D7          	push a
0298   0127 D8          	push b
0299   0128 DA          	push d
0300   0129 E2          	push si
0301   012A E3          	push di
0302   012B 52 00 60    	sub sp, $6000				; string data block
0303   012E 38 00 00    	mov c, 0
0304   0131             	
0305   0131 48          	mov a, sp
0306   0132 77          	inc a
0307   0133 3C          	mov d, a				; start of string data block
0308   0134 07 D5 01    	call gets				; get program string
0309   0137 4D          	mov si, a
0310   0138             __load_hex_loop:
0311   0138 F6          	lodsb					; load from [SI] to AL
0312   0139 B9 00       	cmp al, 0				; check if ASCII 0
0313   013B C6 49 01    	jz __load_hex_ret
0314   013E 36          	mov bh, al
0315   013F F6          	lodsb
0316   0140 2F          	mov bl, al
0317   0141 07 4E 02    	call atoi				; convert ASCII byte in B to int (to AL)
0318   0144 F7          	stosb					; store AL to [DI]
0319   0145 78          	inc c
0320   0146 0A 38 01    	jmp __load_hex_loop
0321   0149             __load_hex_ret:
0322   0149 51 00 60    	add sp, $6000
0323   014C F0          	pop di
0324   014D EF          	pop si
0325   014E E7          	pop d
0326   014F E5          	pop b
0327   0150 E4          	pop a
0328   0151 9C          	mov sp, bp
0329   0152 F1          	pop bp
0330   0153 09          	ret
0331   0154             
0332   0154             
0333   0154             
0334   0154             
0335   0154             mem_dump:
0336   0154 07 DE 03    	call get_token
0337   0157 3B 9F 06    	mov d, token_str
0338   015A 07 81 02    	call strtoint
0339   015D             mem_dump_short:
0340   015D 07 21 02    	call printnl
0341   0160 3C          	mov d, a				; dump pointer in d
0342   0161 38 00 00    	mov c, 0
0343   0164             dump_loop:
0344   0164 84          	mov al, cl
0345   0165 87 0F       	and al, $0F
0346   0167 C6 B3 01    	jz print_base
0347   016A             back:
0348   016A 1E          	mov al, [d]				; read byte
0349   016B 2F          	mov bl, al
0350   016C 07 3A 03    	call print_u8x
0351   016F 10 00 20    	mov a, $2000
0352   0172 05 03       	syscall sys_io			; space
0353   0174 84          	mov al, cl
0354   0175 87 0F       	and al, $0F
0355   0177 B9 0F       	cmp al, $0F
0356   0179 C6 88 01    	je print_ascii
0357   017C             back1:
0358   017C 79          	inc d
0359   017D 78          	inc c
0360   017E C2 00 02    	cmp c, 512
0361   0181 C7 64 01    	jne dump_loop
0362   0184 07 21 02    	call printnl
0363   0187 09          	ret
0364   0188             print_ascii:
0365   0188 10 00 20    	mov a, $2000
0366   018B 05 03       	syscall sys_io
0367   018D 63 10 00    	sub d, 16
0368   0190 26 10 00    	mov b, 16
0369   0193             print_ascii_L:
0370   0193 79          	inc d
0371   0194 1E          	mov al, [d]				; read byte
0372   0195 B9 20       	cmp al, $20
0373   0197 C8 9F 01    	jlu dot
0374   019A B9 7E       	cmp al, $7E
0375   019C D0 A7 01    	jleu ascii
0376   019F             dot:
0377   019F 10 00 2E    	mov a, $2E00
0378   01A2 05 03       	syscall sys_io
0379   01A4 0A AC 01    	jmp ascii_continue
0380   01A7             ascii:
0381   01A7 23          	mov ah, al
0382   01A8 19 00       	mov al, 0
0383   01AA 05 03       	syscall sys_io
0384   01AC             ascii_continue:
0385   01AC FD A9 93 01 	loopb print_ascii_L
0386   01B0 0A 7C 01    	jmp back1
0387   01B3             print_base:
0388   01B3 07 21 02    	call printnl
0389   01B6 2D          	mov b, d
0390   01B7 07 DF 02    	call print_u16x				; display row
0391   01BA 10 00 3A    	mov a, $3A00
0392   01BD 05 03       	syscall sys_io
0393   01BF 10 00 20    	mov a, $2000
0394   01C2 05 03       	syscall sys_io
0395   01C4 0A 6A 01    	jmp back
0396   01C7             
0397   01C7             
0398   01C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0399   01C7             ; GETCHAR
0400   01C7             ; char in ah
0401   01C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0402   01C7             getchar:
0403   01C7 D7          	push a
0404   01C8 19 01       	mov al, 1
0405   01CA 05 03       	syscall sys_io			; receive in AH
0406   01CC E4          	pop a
0407   01CD 09          	ret
0408   01CE             
0409   01CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0410   01CE             ; PUTCHAR
0411   01CE             ; char in ah
0412   01CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0413   01CE             putchar:
0414   01CE D7          	push a
0415   01CF 19 00       	mov al, 0
0416   01D1 05 03       	syscall sys_io			; char in AH
0417   01D3 E4          	pop a
0418   01D4 09          	ret
0419   01D5             	
0420   01D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421   01D5             ;; INPUT A STRING 
0422   01D5             ;; terminates with null
0423   01D5             ;; pointer in D
0424   01D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0425   01D5             gets:
0426   01D5 D7          	push a
0427   01D6 DA          	push d
0428   01D7             gets_loop:
0429   01D7 FD 0C       	sti
0430   01D9 19 01       	mov al, 1
0431   01DB 05 03       	syscall sys_io			; receive in AH
0432   01DD 76 FF       	cmp ah, $FF				; check if nothing received (code for that is FF)
0433   01DF C6 D7 01    	je gets_loop
0434   01E2             	
0435   01E2 76 0A       	cmp ah, 0Ah				; LF
0436   01E4 C6 19 02    	je gets_end
0437   01E7 76 0D       	cmp ah, 0Dh				; CR
0438   01E9 C6 19 02    	je gets_end
0439   01EC 76 5C       	cmp ah, $5C				; '\\'
0440   01EE C6 F7 01    	je gets_escape
0441   01F1 1A          	mov al, ah
0442   01F2 3E          	mov [d], al
0443   01F3 79          	inc d
0444   01F4 0A D7 01    	jmp gets_loop
0445   01F7             gets_escape:
0446   01F7 19 01       	mov al, 1
0447   01F9 05 03       	syscall sys_io			; receive in AH
0448   01FB 76 6E       	cmp ah, 'n'
0449   01FD C6 0B 02    	je gets_LF
0450   0200 76 72       	cmp ah, 'r'
0451   0202 C6 12 02    	je gets_CR
0452   0205 1A          	mov al, ah				; if not a known escape, it is just a normal letter
0453   0206 3E          	mov [d], al
0454   0207 79          	inc d
0455   0208 0A D7 01    	jmp gets_loop
0456   020B             gets_LF:
0457   020B 19 0A       	mov al, $0A
0458   020D 3E          	mov [d], al
0459   020E 79          	inc d
0460   020F 0A D7 01    	jmp gets_loop
0461   0212             gets_CR:
0462   0212 19 0D       	mov al, $0D
0463   0214 3E          	mov [d], al
0464   0215 79          	inc d
0465   0216 0A D7 01    	jmp gets_loop
0466   0219             gets_end:
0467   0219 19 00       	mov al, 0
0468   021B 3E          	mov [d], al				; terminate string
0469   021C E7          	pop d
0470   021D E4          	pop a
0471   021E FD 0C       	sti
0472   0220 09          	ret
0473   0221             
0474   0221             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0475   0221             ; PRINT NEW LINE
0476   0221             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0477   0221             printnl:
0478   0221 D7          	push a
0479   0222 10 00 0A    	mov a, $0A00
0480   0225 05 03       	syscall sys_io
0481   0227 10 00 0D    	mov a, $0D00
0482   022A 05 03       	syscall sys_io
0483   022C E4          	pop a
0484   022D 09          	ret
0485   022E             	
0486   022E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0487   022E             ; PRINT 2 NEW LINES
0488   022E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0489   022E             put_NL2:
0490   022E D7          	push a
0491   022F 10 00 0A    	mov a, $0A00
0492   0232 05 03       	syscall sys_io
0493   0234 10 00 0A    	mov a, $0A00
0494   0237 05 03       	syscall sys_io
0495   0239 10 00 0D    	mov a, $0D00
0496   023C 05 03       	syscall sys_io
0497   023E E4          	pop a
0498   023F 09          	ret
0499   0240             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0500   0240             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0501   0240             ; ASCII in BL
0502   0240             ; result in AL
0503   0240             ; ascii for F = 0100 0110
0504   0240             ; ascii for 9 = 0011 1001
0505   0240             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0506   0240             hex_ascii_encode:
0507   0240 1B          	mov al, bl
0508   0241 93 40       	test al, 40h				; test if letter or number
0509   0243 C7 49 02    	jnz hex_letter
0510   0246 87 0F       	and al, 0Fh				; get number
0511   0248 09          	ret
0512   0249             hex_letter:
0513   0249 87 0F       	and al, 0Fh				; get letter
0514   024B 6A 09       	add al, 9
0515   024D 09          	ret
0516   024E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0517   024E             ; ATOI
0518   024E             ; 2 letter hex string in B
0519   024E             ; 8bit integer returned in AL
0520   024E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0521   024E             atoi:
0522   024E D8          	push b
0523   024F             	
0524   024F 07 40 02    	call hex_ascii_encode			; convert BL to 4bit code in AL
0525   0252 30          	mov bl, bh
0526   0253 DB          	push al					; save a
0527   0254 07 40 02    	call hex_ascii_encode
0528   0257 EA          	pop bl	
0529   0258 FD 9E 04    	shl al, 4
0530   025B 8C          	or al, bl
0531   025C             	
0532   025C E5          	pop b
0533   025D 09          	ret	
0534   025E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535   025E             ; ITOA
0536   025E             ; 8bit value in BL
0537   025E             ; 2 byte ASCII result in A
0538   025E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0539   025E             itoa:
0540   025E DA          	push d
0541   025F DE          	push	bh
0542   0260 DD          	push bl
0543   0261             
0544   0261 A7 00       	mov bh, 0
0545   0263             	
0546   0263 FD 87 0F    	and 	bl, $0F
0547   0266 3B 4F 0B    	mov 	d, s_hex_digits
0548   0269 5A          	add 	d, b
0549   026A 1E          	mov 	al, [d]				; get ASCII
0550   026B EA          	pop 	bl
0551   026C 52 01 00    	sub sp, 1				; push bl back
0552   026F DB          	push al
0553   0270             	
0554   0270 FD 87 F0    	and 	bl, $F0
0555   0273 FD A4 04    	shr 	bl, 4
0556   0276 3B 4F 0B    	mov 	d, s_hex_digits
0557   0279 5A          	add 	d, b
0558   027A 1E          	mov 	al, [d]				; get ASCII
0559   027B             
0560   027B 23          	mov ah, al
0561   027C E8          	pop 	al	
0562   027D             	
0563   027D EA          	pop 	bl
0564   027E EB          	pop bh
0565   027F E7          	pop 	d
0566   0280 09          	ret
0567   0281             	
0568   0281             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0569   0281             ; strtoint
0570   0281             ; 4 digit string number in d
0571   0281             ; integer returned in A
0572   0281             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0573   0281             strtoint:
0574   0281 D8          	push b
0575   0282 32          	mov bl, [d]
0576   0283 37          	mov bh, bl
0577   0284 33 01 00    	mov bl, [d + 1]
0578   0287 07 4E 02    	call atoi				; convert to int in AL
0579   028A 23          	mov ah, al				; move to AH	
0580   028B 33 02 00    	mov bl, [d + 2]
0581   028E 37          	mov bh, bl
0582   028F 33 03 00    	mov bl, [d + 3]
0583   0292 07 4E 02    	call atoi				; convert to int in AL
0584   0295 E5          	pop b
0585   0296 09          	ret
0586   0297             	
0587   0297             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0588   0297             ; PRINT NULL TERMINATED STRING
0589   0297             ; pointer in D
0590   0297             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0591   0297             puts:
0592   0297 D7          	push a
0593   0298 DA          	push d
0594   0299             puts_L1:
0595   0299 1E          	mov al, [d]
0596   029A B9 00       	cmp al, 0
0597   029C C6 A8 02    	jz puts_END
0598   029F 23          	mov ah, al
0599   02A0 19 00       	mov al, 0
0600   02A2 05 03       	syscall sys_io
0601   02A4 79          	inc d	
0602   02A5 0A 99 02    	jmp puts_L1
0603   02A8             puts_END:
0604   02A8 E7          	pop d
0605   02A9 E4          	pop a
0606   02AA 09          	ret
0607   02AB             
0608   02AB             
0609   02AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0610   02AB             ; print 16bit decimal number	
0611   02AB             ; input number in A
0612   02AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0613   02AB             print_u16d:
0614   02AB D7          	push a
0615   02AC D8          	push b
0616   02AD             	
0617   02AD 26 10 27    	mov b, 10000
0618   02B0 AE          	div a, b			; get 10000 coeff.
0619   02B1 07 D8 02    	call print_zero_or_space
0620   02B4 11          	mov a, b
0621   02B5             	
0622   02B5 26 E8 03    	mov b, 1000
0623   02B8 AE          	div a, b			; get 10000 coeff.
0624   02B9 07 D8 02    	call print_zero_or_space
0625   02BC 11          	mov a, b
0626   02BD             
0627   02BD 26 64 00    	mov b, 100
0628   02C0 AE          	div a, b			
0629   02C1 07 D8 02    	call print_zero_or_space
0630   02C4 11          	mov a, b
0631   02C5             		
0632   02C5 26 0A 00    	mov b, 10
0633   02C8 AE          	div a, b		
0634   02C9 07 D8 02    	call print_zero_or_space
0635   02CC 11          	mov a, b
0636   02CD             	
0637   02CD 1B          	mov al, bl
0638   02CE 6A 30       	add al, $30
0639   02D0 23          	mov ah, al
0640   02D1 19 00       	mov al, 0
0641   02D3 05 03       	syscall sys_io	; print coeff
0642   02D5 E5          	pop b
0643   02D6 E4          	pop a
0644   02D7 09          	ret
0645   02D8             
0646   02D8             
0647   02D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0648   02D8             ; if A == 0, print space
0649   02D8             ; else print A
0650   02D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0651   02D8             print_zero_or_space:
0652   02D8             	; cmp a, 0
0653   02D8             	; jne print_number
0654   02D8             	; mov ah, $20
0655   02D8             	; call putchar
0656   02D8             	; ret
0657   02D8             print_number:
0658   02D8 6A 30       	add al, $30
0659   02DA 23          	mov ah, al
0660   02DB 07 CE 01    	call putchar
0661   02DE 09          	ret
0662   02DF             	
0663   02DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0664   02DF             ; PRINT 16BIT HEX INTEGER
0665   02DF             ; integer value in reg B
0666   02DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0667   02DF             print_u16x:
0668   02DF D7          	push a
0669   02E0 D8          	push b
0670   02E1 DD          	push bl
0671   02E2 30          	mov bl, bh
0672   02E3 07 5E 02    	call itoa				; convert bh to char in A
0673   02E6 2F          	mov bl, al				; save al	
0674   02E7 19 00       	mov al, 0
0675   02E9 05 03       	syscall sys_io				; display AH
0676   02EB 24          	mov ah, bl				; retrieve al
0677   02EC 19 00       	mov al, 0
0678   02EE 05 03       	syscall sys_io				; display AL
0679   02F0             
0680   02F0 EA          	pop bl
0681   02F1 07 5E 02    	call itoa				; convert bh to char in A
0682   02F4 2F          	mov bl, al				; save al
0683   02F5 19 00       	mov al, 0
0684   02F7 05 03       	syscall sys_io				; display AH
0685   02F9 24          	mov ah, bl				; retrieve al
0686   02FA 19 00       	mov al, 0
0687   02FC 05 03       	syscall sys_io				; display AL
0688   02FE             
0689   02FE E5          	pop b
0690   02FF E4          	pop a
0691   0300 09          	ret
0692   0301             	
0693   0301             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0694   0301             ; INPUT 16BIT HEX INTEGER
0695   0301             ; read 16bit integer into A
0696   0301             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0697   0301             scan_u16x:
0698   0301 F8 10 00    	enter 16
0699   0304 D8          	push b
0700   0305 DA          	push d
0701   0306             
0702   0306 FA F1 FF    	lea d, [bp + -15]
0703   0309 07 D5 01    	call gets				; get number
0704   030C             
0705   030C 32          	mov bl, [d]
0706   030D 37          	mov bh, bl
0707   030E 33 01 00    	mov bl, [d + 1]
0708   0311 07 4E 02    	call atoi				; convert to int in AL
0709   0314 23          	mov ah, al				; move to AH
0710   0315             	
0711   0315 33 02 00    	mov bl, [d + 2]
0712   0318 37          	mov bh, bl
0713   0319 33 03 00    	mov bl, [d + 3]
0714   031C 07 4E 02    	call atoi				; convert to int in AL
0715   031F             	
0716   031F E7          	pop d	
0717   0320 E5          	pop b
0718   0321 F9          	leave
0719   0322 09          	ret
0720   0323             
0721   0323             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0722   0323             ; INPUT 8BIT HEX INTEGER
0723   0323             ; read 8bit integer into AL
0724   0323             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0725   0323             scan_u8x:
0726   0323 F8 04 00    	enter 4
0727   0326 D8          	push b
0728   0327 DA          	push d
0729   0328             
0730   0328 FA FD FF    	lea d, [bp + -3]
0731   032B 07 D5 01    	call gets				; get number
0732   032E             
0733   032E 32          	mov bl, [d]
0734   032F 37          	mov bh, bl
0735   0330 33 01 00    	mov bl, [d + 1]
0736   0333 07 4E 02    	call atoi				; convert to int in AL
0737   0336             	
0738   0336 E7          	pop d	
0739   0337 E5          	pop b
0740   0338 F9          	leave
0741   0339 09          	ret
0742   033A             
0743   033A             
0744   033A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0745   033A             ; PRINT 8bit HEX INTEGER
0746   033A             ; integer value in reg bl
0747   033A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0748   033A             print_u8x:
0749   033A D7          	push a
0750   033B DD          	push bl
0751   033C             
0752   033C 07 5E 02    	call itoa				; convert bl to char in A
0753   033F 2F          	mov bl, al				; save al
0754   0340 19 00       	mov al, 0
0755   0342 05 03       	syscall sys_io				; display AH
0756   0344 24          	mov ah, bl				; retrieve al
0757   0345 19 00       	mov al, 0
0758   0347 05 03       	syscall sys_io				; display AL
0759   0349             
0760   0349 EA          	pop bl
0761   034A E4          	pop a
0762   034B 09          	ret
0763   034C             
0764   034C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0765   034C             ; print 8bit decimal unsigned number	
0766   034C             ; input number in AL
0767   034C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0768   034C             print_u8d:
0769   034C D7          	push a
0770   034D D8          	push b
0771   034E             		
0772   034E 22 00       	mov ah, 0
0773   0350 26 64 00    	mov b, 100
0774   0353 AE          	div a, b			
0775   0354 D8          	push b			; save remainder
0776   0355 B9 00       	cmp al, 0
0777   0357 C6 61 03    	je skip100
0778   035A 6A 30       	add al, $30
0779   035C 23          	mov ah, al
0780   035D 19 00       	mov al, 0
0781   035F 05 03       	syscall sys_io	; print coeff
0782   0361             skip100:
0783   0361 E4          	pop a
0784   0362 22 00       	mov ah, 0
0785   0364 26 0A 00    	mov b, 10
0786   0367 AE          	div a, b			
0787   0368 D8          	push b			; save remainder
0788   0369 B9 00       	cmp al, 0
0789   036B C6 75 03    	je skip10
0790   036E 6A 30       	add al, $30
0791   0370 23          	mov ah, al
0792   0371 19 00       	mov al, 0
0793   0373 05 03       	syscall sys_io	; print coeff
0794   0375             skip10:
0795   0375 E4          	pop a
0796   0376 1B          	mov al, bl
0797   0377 6A 30       	add al, $30
0798   0379 23          	mov ah, al
0799   037A 19 00       	mov al, 0
0800   037C 05 03       	syscall sys_io	; print coeff
0801   037E E5          	pop b
0802   037F E4          	pop a
0803   0380 09          	ret
0804   0381             
0805   0381             
0806   0381             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0807   0381             ; HEX STRING TO BINARY
0808   0381             ; di = destination address
0809   0381             ; si = source
0810   0381             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0811   0381             hex_to_int:
0812   0381             hex_to_int_L1:
0813   0381 F6          	lodsb					; load from [SI] to AL
0814   0382 B9 00       	cmp al, 0				; check if ASCII 0
0815   0384 C6 91 03    	jz hex_to_int_ret
0816   0387 36          	mov bh, al
0817   0388 F6          	lodsb
0818   0389 2F          	mov bl, al
0819   038A 07 4E 02    	call atoi				; convert ASCII byte in B to int (to AL)
0820   038D F7          	stosb					; store AL to [DI]
0821   038E 0A 81 03    	jmp hex_to_int_L1
0822   0391             hex_to_int_ret:
0823   0391 09          	ret		
0824   0392             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0825   0392             ; length of null terminated string
0826   0392             ; result in C
0827   0392             ; pointer in D
0828   0392             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0829   0392             strlen:
0830   0392 DA          	push d
0831   0393 DB          	push al
0832   0394 38 00 00    	mov c, 0
0833   0397             strlen_L1:
0834   0397 BD 00       	cmp byte [d], 0
0835   0399 C6 A1 03    	je strlen_ret
0836   039C 79          	inc d
0837   039D 78          	inc c
0838   039E 0A 97 03    	jmp strlen_L1	
0839   03A1             strlen_ret:
0840   03A1 E8          	pop al
0841   03A2 E7          	pop d
0842   03A3 09          	ret
0843   03A4             
0844   03A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0845   03A4             ; input decimal number	
0846   03A4             ; result in A
0847   03A4             ; 655'\0'
0848   03A4             ; low--------high
0849   03A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0850   03A4             scan_u16d:
0851   03A4 F8 08 00    	enter 8
0852   03A7 E2          	push si
0853   03A8 D8          	push b
0854   03A9 D9          	push c
0855   03AA DA          	push d
0856   03AB FA F9 FF    	lea d, [bp +- 7]
0857   03AE 07 D5 01    	call gets
0858   03B1 07 92 03    	call strlen			; get string length in C
0859   03B4 7E          	dec c	
0860   03B5 FD 4E       	mov si, d
0861   03B7 12          	mov a, c
0862   03B8 FD 99       	shl a
0863   03BA 3B FF 0A    	mov d, table_power
0864   03BD 59          	add d, a
0865   03BE 38 00 00    	mov c, 0
0866   03C1             mul_loop:
0867   03C1 F6          	lodsb			; load ASCII to al
0868   03C2 B9 00       	cmp al, 0
0869   03C4 C6 D7 03    	je mul_exit
0870   03C7 6F 30       	sub al, $30		; make into integer
0871   03C9 22 00       	mov ah, 0
0872   03CB 2A          	mov b, [d]
0873   03CC AC          	mul a, b			; result in B since it fits in 16bits
0874   03CD 11          	mov a, b
0875   03CE 28          	mov b, c
0876   03CF 54          	add a, b
0877   03D0 39          	mov c, a
0878   03D1 63 02 00    	sub d, 2
0879   03D4 0A C1 03    	jmp mul_loop
0880   03D7             mul_exit:
0881   03D7 12          	mov a, c
0882   03D8 E7          	pop d
0883   03D9 E6          	pop c
0884   03DA E5          	pop b
0885   03DB EF          	pop si
0886   03DC F9          	leave
0887   03DD 09          	ret
0888   03DE             
0889   03DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0890   03DE             ;; SHELL DATA
0891   03DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0892   03DE             get_token:
0893   03DE 19 00       	mov al, TOK_NULL
0894   03E0 3D 9E 06    	mov [token], al				; nullify token
0895   03E3 14 9F 08    	mov a, [shell_buff_ptr]
0896   03E6 4D          	mov si, a
0897   03E7 FD 4F 9F 06 	mov di, token_str
0898   03EB             skip_spaces:
0899   03EB F6          	lodsb
0900   03EC B9 20       	cmp al, $20
0901   03EE C6 EB 03    	je skip_spaces
0902   03F1 B9 0D       	cmp al, $0D
0903   03F3 C6 EB 03    	je skip_spaces
0904   03F6 B9 0A       	cmp al, $0A
0905   03F8 C6 EB 03    	je skip_spaces
0906   03FB             get_tok_type:
0907   03FB 07 B0 04    	call isalpha				;check if is alpha
0908   03FE C6 5F 04    	jz is_alphanumeric
0909   0401 07 99 04    	call isnumeric			;check if is numeric
0910   0404 C6 5F 04    	jz is_alphanumeric
0911   0407             ; other token types
0912   0407             get_token_slash:
0913   0407 B9 2F       	cmp al, '/'				; check if '/'
0914   0409 C7 1A 04    	jne get_token_dash
0915   040C F7          	stosb					; store '/' into token string
0916   040D 19 00       	mov al, 0
0917   040F F7          	stosb					; terminate token string
0918   0410 19 01       	mov al, TOK_SLASH
0919   0412 3D 9E 06    	mov [token], al			; save token as SLASH
0920   0415 4E          	mov a, si
0921   0416 42 9F 08    	mov [shell_buff_ptr], a		; update pointer
0922   0419 09          	ret
0923   041A             get_token_dash:
0924   041A B9 2D       	cmp al, '-'				; check if '-'
0925   041C C7 2D 04    	jne get_token_dot
0926   041F F7          	stosb					; store '-' into token string
0927   0420 19 00       	mov al, 0
0928   0422 F7          	stosb					; terminate token string
0929   0423 19 04       	mov al, TOK_DASH
0930   0425 3D 9E 06    	mov [token], al			; save token as SLASH
0931   0428 4E          	mov a, si
0932   0429 42 9F 08    	mov [shell_buff_ptr], a		; update pointer
0933   042C 09          	ret
0934   042D             get_token_dot:
0935   042D B9 2E       	cmp al, '.'				; check if '.'
0936   042F C7 57 04    	jne get_token_skip
0937   0432 F7          	stosb					; store '.' into token string
0938   0433 F6          	lodsb
0939   0434 B9 2E       	cmp al, $2E
0940   0436 C6 49 04    	je get_token_ddot
0941   0439 D5 01 00    	sub si, 1
0942   043C 19 00       	mov al, 0
0943   043E F7          	stosb					; terminate token string
0944   043F 19 06       	mov al, TOK_DOT
0945   0441 3D 9E 06    	mov [token], al			; save token as DOT
0946   0444 4E          	mov a, si
0947   0445 42 9F 08    	mov [shell_buff_ptr], a		; update pointer
0948   0448 09          	ret
0949   0449             get_token_ddot:
0950   0449 F7          	stosb
0951   044A 19 00       	mov al, 0
0952   044C F7          	stosb
0953   044D 19 07       	mov al, TOK_DDOT
0954   044F 3D 9E 06    	mov [token], al			; save token as DDOT
0955   0452 4E          	mov a, si
0956   0453 42 9F 08    	mov [shell_buff_ptr], a		; update pointer
0957   0456 09          	ret
0958   0457             get_token_skip:
0959   0457 D5 01 00    	sub si, 1
0960   045A 4E          	mov a, si
0961   045B 42 9F 08    	mov [shell_buff_ptr], a		; update pointer
0962   045E 09          	ret
0963   045F             is_alphanumeric:
0964   045F F7          	stosb
0965   0460 F6          	lodsb
0966   0461 07 B0 04    	call isalpha				;check if is alpha
0967   0464 C6 5F 04    	jz is_alphanumeric
0968   0467 07 99 04    	call isnumeric			;check if is numeric
0969   046A C6 5F 04    	jz is_alphanumeric
0970   046D B9 2E       	cmp al, $2E				; check if is '.'
0971   046F C6 5F 04    	je is_alphanumeric
0972   0472 19 00       	mov al, 0
0973   0474 F7          	stosb
0974   0475 19 00       	mov al, TOKTYP_IDENTIFIER
0975   0477 3D 9D 06    	mov [token_type], al
0976   047A D5 01 00    	sub si, 1
0977   047D 4E          	mov a, si
0978   047E 42 9F 08    	mov [shell_buff_ptr], a		; update pointer
0979   0481 09          	ret
0980   0482             	
0981   0482             
0982   0482             
0983   0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0984   0482             ;; PUT BACK TOKEN
0985   0482             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
0986   0482             putback:
0987   0482 E2          	push si
0988   0483 FD 4D 9F 06 	mov si, token_str	
0989   0487             putback_loop:
0990   0487 F6          	lodsb
0991   0488 B9 00       	cmp al, 0
0992   048A C6 97 04    	je putback_end
0993   048D 14 9F 08    	mov a, [shell_buff_ptr]
0994   0490 7D          	dec a
0995   0491 42 9F 08    	mov [shell_buff_ptr], a			; update pointer
0996   0494 0A 87 04    	jmp putback_loop
0997   0497             putback_end:
0998   0497 EF          	pop si
0999   0498 09          	ret
1000   0499             	
1001   0499             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1002   0499             ;; IS NUMERIC
1003   0499             ;; sets ZF according with result
1004   0499             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1005   0499             isnumeric:
1006   0499 DB          	push al
1007   049A B9 30       	cmp al, '0'
1008   049C C8 AA 04    	jlu isnumeric_false
1009   049F B9 39       	cmp al, '9'
1010   04A1 D1 AA 04    	jgu isnumeric_false
1011   04A4 0E          	lodflgs
1012   04A5 8B 01       	or al, %00000001
1013   04A7 0F          	stoflgs
1014   04A8 E8          	pop al
1015   04A9 09          	ret
1016   04AA             isnumeric_false:
1017   04AA 0E          	lodflgs
1018   04AB 87 FE       	and al, %11111110
1019   04AD 0F          	stoflgs
1020   04AE E8          	pop al
1021   04AF 09          	ret	
1022   04B0             	
1023   04B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1024   04B0             ;; IS ALPHA
1025   04B0             ;; sets ZF according with result
1026   04B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1027   04B0             isalpha:
1028   04B0 DB          	push al
1029   04B1 B9 5F       	cmp al, '_'
1030   04B3 C6 C3 04    	je isalpha_true
1031   04B6             	
1032   04B6 07 CF 04    	call to_lower
1033   04B9 B9 61       	cmp al, 'a'
1034   04BB C8 C9 04    	jlu isalpha_false
1035   04BE B9 7A       	cmp al, 'z'
1036   04C0 D1 C9 04    	jgu isalpha_false
1037   04C3             isalpha_true:
1038   04C3 0E          	lodflgs
1039   04C4 8B 01       	or al, %00000001
1040   04C6 0F          	stoflgs
1041   04C7 E8          	pop al
1042   04C8 09          	ret
1043   04C9             isalpha_false:
1044   04C9 0E          	lodflgs
1045   04CA 87 FE       	and al, %11111110
1046   04CC 0F          	stoflgs
1047   04CD E8          	pop al
1048   04CE 09          	ret
1049   04CF             	
1050   04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1051   04CF             ; TO LOWER
1052   04CF             ; input in AL
1053   04CF             ; output in AL
1054   04CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1055   04CF             to_lower:
1056   04CF B9 5A       	cmp al, 'Z'
1057   04D1 D1 D6 04    	jgu to_lower_ret
1058   04D4 6A 20       	add al, $20				; convert to lower case
1059   04D6             to_lower_ret:
1060   04D6 09          	ret
1061   04D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1062   04D7             ; TO UPPER
1063   04D7             ; input in AL
1064   04D7             ; output in AL
1065   04D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1066   04D7             to_upper:
1067   04D7 B9 61       	cmp al, 'a'
1068   04D9 C8 DE 04    	jlu to_upper_ret
1069   04DC 6F 20       	sub al, $20			; convert to upper case
1070   04DE             to_upper_ret:
1071   04DE 09          	ret
1072   04DF             	
1073   04DF             ; ********************************************************************
1074   04DF             ; DATETIME
1075   04DF             ; ********************************************************************
1076   04DF             cmd_printdate:
1077   04DF 19 03       	mov al, 3
1078   04E1 05 01       	syscall sys_rtc				; get week
1079   04E3 1A          	mov al, ah
1080   04E4 22 00       	mov ah, 0
1081   04E6 FD 9D 02    	shl a, 2					; times 16
1082   04E9 3B ED 0B    	mov d, s_week
1083   04EC 59          	add d, a
1084   04ED 07 97 02    	call puts
1085   04F0 10 00 20    	mov a, $2000
1086   04F3 05 03       	syscall sys_io					; display ' '
1087   04F5             	
1088   04F5 19 04       	mov al, 4
1089   04F7 05 01       	syscall sys_rtc					; get day
1090   04F9 99          	mov bl, ah
1091   04FA 07 3A 03    	call print_u8x
1092   04FD 10 00 20    	mov a, $2000
1093   0500 05 03       	syscall sys_io					; display ' '
1094   0502             	
1095   0502 19 05       	mov al, 05
1096   0504 05 01       	syscall sys_rtc				; get month
1097   0506 1A          	mov al, ah
1098   0507 22 00       	mov ah, 0
1099   0509 FD 9D 02    	shl a, 2					; times 16
1100   050C 3B B9 0B    	mov d, s_months
1101   050F 59          	add d, a
1102   0510 07 97 02    	call puts
1103   0513             	
1104   0513 10 00 20    	mov a, $2000
1105   0516 05 03       	syscall sys_io			; display ' '
1106   0518             	
1107   0518 2E 20       	mov bl, $20
1108   051A 07 3A 03    	call print_u8x			; print 20 for year prefix
1109   051D 19 06       	mov al, 06
1110   051F 05 01       	syscall sys_rtc					; get year
1111   0521 99          	mov bl, ah
1112   0522 07 3A 03    	call print_u8x
1113   0525             	
1114   0525 10 00 20    	mov a, $2000	
1115   0528 05 03       	syscall sys_io			; display ' '
1116   052A             
1117   052A 19 02       	mov al, 2
1118   052C 05 01       	syscall sys_rtc					; get hours
1119   052E 99          	mov bl, ah
1120   052F 07 3A 03    	call print_u8x
1121   0532 10 00 3A    	mov a, $3A00		
1122   0535 05 03       	syscall sys_io				; display ':'
1123   0537             
1124   0537 19 01       	mov al, 01
1125   0539 05 01       	syscall sys_rtc					; get minutes
1126   053B 99          	mov bl, ah
1127   053C 07 3A 03    	call print_u8x
1128   053F 10 00 3A    	mov a, $3A00	
1129   0542 05 03       	syscall sys_io			; display ':'
1130   0544             
1131   0544 19 00       	mov al, 0
1132   0546 05 01       	syscall sys_rtc					; get seconds
1133   0548 99          	mov bl, ah
1134   0549 07 3A 03    	call print_u8x
1135   054C             	
1136   054C 07 21 02    	call printnl
1137   054F 09          	ret
1138   0550             	
1139   0550             cmd_setdate:
1140   0550 07 21 02    	call printnl
1141   0553 3B 7E 0B    	mov d, s_set_year
1142   0556 07 97 02    	call puts
1143   0559 07 23 03    	call scan_u8x				; read integer into A
1144   055C FD 9D 08    	shl a, 8				; only AL used, move to AH
1145   055F 19 0D       	mov al, 0Dh				; set RTC year
1146   0561 05 01       	syscall sys_rtc					; set RTC
1147   0563             	
1148   0563 07 21 02    	call printnl
1149   0566 3B 85 0B    	mov d, s_set_month
1150   0569 07 97 02    	call puts
1151   056C 07 23 03    	call scan_u8x					; read integer into A
1152   056F FD 9D 08    	shl a, 8				; only AL used, move to AH
1153   0572 19 0C       	mov al, 0Ch				; set RTC month
1154   0574 05 01       	syscall sys_rtc					; set RTC
1155   0576             
1156   0576 07 21 02    	call printnl
1157   0579 3B 8D 0B    	mov d, s_set_day
1158   057C 07 97 02    	call puts
1159   057F 07 23 03    	call scan_u8x					; read integer into A
1160   0582 FD 9D 08    	shl a, 8				; only AL used, move to AH
1161   0585 19 0B       	mov al, 0Bh				; set RTC month
1162   0587 05 01       	syscall sys_rtc					; set RTC
1163   0589             
1164   0589 07 21 02    	call printnl
1165   058C 3B 93 0B    	mov d, s_set_week
1166   058F 07 97 02    	call puts
1167   0592 07 23 03    	call scan_u8x					; read integer into A
1168   0595 FD 9D 08    	shl a, 8				; only AL used, move to AH
1169   0598 19 0A       	mov al, 0Ah				; set RTC month
1170   059A 05 01       	syscall sys_rtc					; set RTC
1171   059C             
1172   059C 07 21 02    	call printnl
1173   059F 3B 9D 0B    	mov d, s_set_hours
1174   05A2 07 97 02    	call puts
1175   05A5 07 23 03    	call scan_u8x					; read integer into A
1176   05A8 FD 9D 08    	shl a, 8				; only AL used, move to AH
1177   05AB 19 09       	mov al, 09h				; set RTC month
1178   05AD 05 01       	syscall sys_rtc					; set RTC
1179   05AF             
1180   05AF 07 21 02    	call printnl
1181   05B2 3B A5 0B    	mov d, s_set_minutes
1182   05B5 07 97 02    	call puts
1183   05B8 07 23 03    	call scan_u8x					; read integer into A
1184   05BB FD 9D 08    	shl a, 8				; only AL used, move to AH
1185   05BE 19 08       	mov al, 08h				; set RTC month
1186   05C0 05 01       	syscall sys_rtc					; set RTC
1187   05C2             
1188   05C2 07 21 02    	call printnl
1189   05C5 3B AF 0B    	mov d, s_set_seconds
1190   05C8 07 97 02    	call puts
1191   05CB 07 23 03    	call scan_u8x					; read integer into A
1192   05CE FD 9D 08    	shl a, 8					; only AL used, move to AH
1193   05D1 19 07       	mov al, 07h				; set RTC month
1194   05D3 05 01       	syscall sys_rtc					; set RTC
1195   05D5             	
1196   05D5 07 21 02    	call printnl
1197   05D8 09          	ret	
1198   05D9             	
1199   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1200   05D9             ;; FILE SYSTEM DATA
1201   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1202   05D9             ; infor for : IDE SERVICES INTERRUPT
1203   05D9             ; al = option
1204   05D9             ; IDE read/write sector
1205   05D9             ; 512 bytes
1206   05D9             ; user buffer pointer in D
1207   05D9             ; AH = number of sectors
1208   05D9             ; CB = LBA bytes 3..0	
1209   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1210   05D9             ;; FILE SYSTEM DATA STRUCTURE
1211   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1212   05D9             ; for a directory we have the header first, followed by metadata
1213   05D9             ; header 1 sector (512 bytes)
1214   05D9             ; metadata 1 sector (512 bytes)
1215   05D9             ; HEADER ENTRIES:
1216   05D9             ; filename (64)
1217   05D9             ; parent dir LBA (2) -  to be used for faster backwards navigation...
1218   05D9             ;
1219   05D9             ; metadata entries:
1220   05D9             ; filename (24)
1221   05D9             ; attributes (1)
1222   05D9             ; LBA (2)
1223   05D9             ; size (2)
1224   05D9             ; day (1)
1225   05D9             ; month (1)
1226   05D9             ; year (1)
1227   05D9             ; packet size = 32 bytes
1228   05D9             ;
1229   05D9             ; first directory on disk is the root directory '/'
1230   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1231   05D9             ;; FILE SYSTEM DISK FORMATTING
1232   05D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1233   05D9             ; writes FST_TOTAL_SECTORS + FS_NBR_FILES disk sectors  with 0's
1234   05D9             ; this is the file system table formating
1235   05D9             cmd_mkfs:
1236   05D9 07 21 02    	call printnl	
1237   05DC 19 00       	mov al, 0
1238   05DE 05 04       	syscall sys_fileio
1239   05E0 09          	ret
1240   05E1             	
1241   05E1             
1242   05E1             cmd_fs_space:
1243   05E1 19 01       	mov al, 1
1244   05E3 05 04       	syscall sys_fileio
1245   05E5 07 21 02    	call printnl
1246   05E8 09          	ret
1247   05E9             
1248   05E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1249   05E9             ;; CREATE NEW DIRECTORY
1250   05E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1251   05E9             ; search list for NULL name entry.
1252   05E9             ; add new directory to list
1253   05E9             cmd_mkdir:
1254   05E9 07 DE 03    	call get_token
1255   05EC 3B 9F 06    	mov d, token_str
1256   05EF 19 02       	mov al, 2
1257   05F1 05 04       	syscall sys_fileio
1258   05F3 07 21 02    	call printnl
1259   05F6 09          	ret
1260   05F7             
1261   05F7             
1262   05F7             
1263   05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1264   05F7             ;; CD
1265   05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1266   05F7             ; search for given directory inside current dir
1267   05F7             ; if found, read its LBA, and switch directories
1268   05F7             cmd_cd:
1269   05F7 07 21 02    	call printnl
1270   05FA 07 DE 03    	call get_token			; get dir name
1271   05FD 1D 9E 06    	mov al, [token]			; get token
1272   0600 B9 07       	cmp al, TOK_DDOT			; check if ".."
1273   0602 C7 0A 06    	jne cmd_cd_child			; is a child directory
1274   0605             	
1275   0605             ; else we want the parent directory
1276   0605 19 0C       	mov al, 12
1277   0607 05 04       	syscall sys_fileio
1278   0609 09          	ret
1279   060A             cmd_cd_child:
1280   060A 3B 9F 06    	mov d, token_str
1281   060D 19 03       	mov al, 3
1282   060F 05 04       	syscall sys_fileio
1283   0611 09          	ret
1284   0612             
1285   0612             	
1286   0612             
1287   0612             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1288   0612             ;; LS
1289   0612             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1290   0612             cmd_ls:	
1291   0612 07 21 02    	call printnl
1292   0615 19 04       	mov al, 4
1293   0617 05 04       	syscall sys_fileio
1294   0619             	
1295   0619 09          	ret
1296   061A             
1297   061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1298   061A             ;; pad string to 32 chars
1299   061A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1300   061A             ; count in C
1301   061A             padding:
1302   061A D7          	push a
1303   061B 10 20 00    	mov a, 32
1304   061E 28          	mov b, c
1305   061F 60          	sub a, b
1306   0620 39          	mov c, a
1307   0621             padding_L1:
1308   0621 22 20       	mov ah, $20
1309   0623 07 CE 01    	call putchar
1310   0626 A9 21 06    	loopc padding_L1
1311   0629 E4          	pop a
1312   062A 09          	ret
1313   062B             ; file structure:
1314   062B             ; 512 bytes header
1315   062B             ; header used to tell whether the block is free
1316   062B             
1317   062B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1318   062B             ;; CREATE NEW TEXTFILE
1319   062B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1320   062B             ; search for first null block
1321   062B             cmd_mktxt:
1322   062B 07 21 02    	call printnl
1323   062E 07 DE 03    	call get_token
1324   0631 3B 9F 06    	mov d, token_str
1325   0634 19 05       	mov al, 5
1326   0636 05 04       	syscall sys_fileio
1327   0638 09          	ret
1328   0639             
1329   0639             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1330   0639             ;; CREATE NEW BINARY FILE
1331   0639             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1332   0639             ; search for first null block
1333   0639             cmd_mkbin:
1334   0639 07 21 02    	call printnl
1335   063C 07 DE 03    	call get_token
1336   063F 3B 9F 06    	mov d, token_str
1337   0642 19 06       	mov al, 6
1338   0644 05 04       	syscall sys_fileio
1339   0646 09          	ret
1340   0647             
1341   0647             			
1342   0647             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1343   0647             ;; PWD - PRINT WORKING DIRECTORY
1344   0647             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
1345   0647             cmd_pwd:
1346   0647 07 21 02    	call printnl
1347   064A 19 07       	mov al, 7
1348   064C 05 04       	syscall sys_fileio
1349   064E 09          	ret
1350   064F             
1351   064F             	
1352   064F             	
1353   064F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1354   064F             ;; CAT
1355   064F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:
1356   064F             cmd_cat:
1357   064F 07 21 02    	call printnl
1358   0652 07 DE 03    	call get_token
1359   0655 3B 9F 06    	mov d, token_str
1360   0658             	
1361   0658 19 08       	mov al, 8
1362   065A 05 04       	syscall sys_fileio
1363   065C             	
1364   065C 09          	ret
1365   065D             	
1366   065D             
1367   065D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1368   065D             ;; RMDIR - remove DIR
1369   065D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1370   065D             ; deletes directory  entry in the current directory's file list 
1371   065D             ; also deletes the actual directory entry in the FST
1372   065D             cmd_rmdir:
1373   065D 07 DE 03    	call get_token
1374   0660 3B 9F 06    	mov d, token_str
1375   0663 19 09       	mov al, 9
1376   0665 05 04       	syscall sys_fileio	
1377   0667 07 21 02    	call printnl
1378   066A 09          	ret
1379   066B             
1380   066B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1381   066B             ;; RM - remove file
1382   066B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1383   066B             ; frees up the data sectors for the file further down the disk
1384   066B             ; deletes file entry in the current directory's file list 
1385   066B             cmd_rm:
1386   066B 07 DE 03    	call get_token
1387   066E 3B 9F 06    	mov d, token_str
1388   0671 19 0A       	mov al, 10
1389   0673 05 04       	syscall sys_fileio
1390   0675 07 21 02    	call printnl
1391   0678 09          	ret
1392   0679             	
1393   0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1394   0679             ;; CHMOD - change file permissions
1395   0679             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1396   0679             cmd_chmod:
1397   0679             	
1398   0679 09          	ret
1399   067A             
1400   067A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1401   067A             ;; mv - move / change file name
1402   067A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1403   067A             cmd_mv:
1404   067A             	
1405   067A 09          	ret
1406   067B             
1407   067B             
1408   067B             
1409   067B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1410   067B             ;; EXEC/OPEN PROGRAM/FILE
1411   067B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1412   067B             cmd_exec:
1413   067B             ; we read "./" sequence here
1414   067B 1D 9E 06    	mov al, [token]
1415   067E B9 06       	cmp al, TOK_DOT
1416   0680 C7 98 06    	jne cmd_exec_end
1417   0683 07 DE 03    	call get_token
1418   0686 1D 9E 06    	mov al, [token]
1419   0689 B9 01       	cmp al, TOK_SLASH	
1420   068B C7 98 06    	jne cmd_exec_end
1421   068E 07 DE 03    	call get_token		; get filename
1422   0691 3B 9F 06    	mov d, token_str
1423   0694 19 0B       	mov al, 11
1424   0696 05 04       	syscall sys_fileio
1425   0698             cmd_exec_end:
1426   0698 09          	ret
1427   0699             
1428   0699 00 00       index:				.dw 0
1429   069B 00 00       buffer_addr:			.dw 0
1430   069D             
1431   069D             ; shell variables
1432   069D 00          token_type: 			.db 0
1433   069E 00          token:				.db 0
1434   069F 00 00 00 00 token_str:			.fill 256, 0
1434   06A3 00 00 00 00 
1434   06A7 00 00 00 00 
1434   06AB 00 00 00 00 
1434   06AF 00 00 00 00 
1434   06B3 00 00 00 00 
1434   06B7 00 00 00 00 
1434   06BB 00 00 00 00 
1434   06BF 00 00 00 00 
1434   06C3 00 00 00 00 
1434   06C7 00 00 00 00 
1434   06CB 00 00 00 00 
1434   06CF 00 00 00 00 
1434   06D3 00 00 00 00 
1434   06D7 00 00 00 00 
1434   06DB 00 00 00 00 
1434   06DF 00 00 00 00 
1434   06E3 00 00 00 00 
1434   06E7 00 00 00 00 
1434   06EB 00 00 00 00 
1434   06EF 00 00 00 00 
1434   06F3 00 00 00 00 
1434   06F7 00 00 00 00 
1434   06FB 00 00 00 00 
1434   06FF 00 00 00 00 
1434   0703 00 00 00 00 
1434   0707 00 00 00 00 
1434   070B 00 00 00 00 
1434   070F 00 00 00 00 
1434   0713 00 00 00 00 
1434   0717 00 00 00 00 
1434   071B 00 00 00 00 
1434   071F 00 00 00 00 
1434   0723 00 00 00 00 
1434   0727 00 00 00 00 
1434   072B 00 00 00 00 
1434   072F 00 00 00 00 
1434   0733 00 00 00 00 
1434   0737 00 00 00 00 
1434   073B 00 00 00 00 
1434   073F 00 00 00 00 
1434   0743 00 00 00 00 
1434   0747 00 00 00 00 
1434   074B 00 00 00 00 
1434   074F 00 00 00 00 
1434   0753 00 00 00 00 
1434   0757 00 00 00 00 
1434   075B 00 00 00 00 
1434   075F 00 00 00 00 
1434   0763 00 00 00 00 
1434   0767 00 00 00 00 
1434   076B 00 00 00 00 
1434   076F 00 00 00 00 
1434   0773 00 00 00 00 
1434   0777 00 00 00 00 
1434   077B 00 00 00 00 
1434   077F 00 00 00 00 
1434   0783 00 00 00 00 
1434   0787 00 00 00 00 
1434   078B 00 00 00 00 
1434   078F 00 00 00 00 
1434   0793 00 00 00 00 
1434   0797 00 00 00 00 
1434   079B 00 00 00 00 
1435   079F 00 00 00 00 shell_input_buff:		.fill 256, 0
1435   07A3 00 00 00 00 
1435   07A7 00 00 00 00 
1435   07AB 00 00 00 00 
1435   07AF 00 00 00 00 
1435   07B3 00 00 00 00 
1435   07B7 00 00 00 00 
1435   07BB 00 00 00 00 
1435   07BF 00 00 00 00 
1435   07C3 00 00 00 00 
1435   07C7 00 00 00 00 
1435   07CB 00 00 00 00 
1435   07CF 00 00 00 00 
1435   07D3 00 00 00 00 
1435   07D7 00 00 00 00 
1435   07DB 00 00 00 00 
1435   07DF 00 00 00 00 
1435   07E3 00 00 00 00 
1435   07E7 00 00 00 00 
1435   07EB 00 00 00 00 
1435   07EF 00 00 00 00 
1435   07F3 00 00 00 00 
1435   07F7 00 00 00 00 
1435   07FB 00 00 00 00 
1435   07FF 00 00 00 00 
1435   0803 00 00 00 00 
1435   0807 00 00 00 00 
1435   080B 00 00 00 00 
1435   080F 00 00 00 00 
1435   0813 00 00 00 00 
1435   0817 00 00 00 00 
1435   081B 00 00 00 00 
1435   081F 00 00 00 00 
1435   0823 00 00 00 00 
1435   0827 00 00 00 00 
1435   082B 00 00 00 00 
1435   082F 00 00 00 00 
1435   0833 00 00 00 00 
1435   0837 00 00 00 00 
1435   083B 00 00 00 00 
1435   083F 00 00 00 00 
1435   0843 00 00 00 00 
1435   0847 00 00 00 00 
1435   084B 00 00 00 00 
1435   084F 00 00 00 00 
1435   0853 00 00 00 00 
1435   0857 00 00 00 00 
1435   085B 00 00 00 00 
1435   085F 00 00 00 00 
1435   0863 00 00 00 00 
1435   0867 00 00 00 00 
1435   086B 00 00 00 00 
1435   086F 00 00 00 00 
1435   0873 00 00 00 00 
1435   0877 00 00 00 00 
1435   087B 00 00 00 00 
1435   087F 00 00 00 00 
1435   0883 00 00 00 00 
1435   0887 00 00 00 00 
1435   088B 00 00 00 00 
1435   088F 00 00 00 00 
1435   0893 00 00 00 00 
1435   0897 00 00 00 00 
1435   089B 00 00 00 00 
1436   089F 00 00       shell_buff_ptr:		.dw 0
1437   08A1             
1438   08A1             ; file system variables
1439   08A1             
1440   08A1 00 00       current_dir_LBA:		.dw 0				; keep ID of current directory
1441   08A3 00 00 00 00 username:			.fill 64, 0
1441   08A7 00 00 00 00 
1441   08AB 00 00 00 00 
1441   08AF 00 00 00 00 
1441   08B3 00 00 00 00 
1441   08B7 00 00 00 00 
1441   08BB 00 00 00 00 
1441   08BF 00 00 00 00 
1441   08C3 00 00 00 00 
1441   08C7 00 00 00 00 
1441   08CB 00 00 00 00 
1441   08CF 00 00 00 00 
1441   08D3 00 00 00 00 
1441   08D7 00 00 00 00 
1441   08DB 00 00 00 00 
1441   08DF 00 00 00 00 
1442   08E3 00 00 00 00 filename:			.fill 256, 0		; holds filename for search
1442   08E7 00 00 00 00 
1442   08EB 00 00 00 00 
1442   08EF 00 00 00 00 
1442   08F3 00 00 00 00 
1442   08F7 00 00 00 00 
1442   08FB 00 00 00 00 
1442   08FF 00 00 00 00 
1442   0903 00 00 00 00 
1442   0907 00 00 00 00 
1442   090B 00 00 00 00 
1442   090F 00 00 00 00 
1442   0913 00 00 00 00 
1442   0917 00 00 00 00 
1442   091B 00 00 00 00 
1442   091F 00 00 00 00 
1442   0923 00 00 00 00 
1442   0927 00 00 00 00 
1442   092B 00 00 00 00 
1442   092F 00 00 00 00 
1442   0933 00 00 00 00 
1442   0937 00 00 00 00 
1442   093B 00 00 00 00 
1442   093F 00 00 00 00 
1442   0943 00 00 00 00 
1442   0947 00 00 00 00 
1442   094B 00 00 00 00 
1442   094F 00 00 00 00 
1442   0953 00 00 00 00 
1442   0957 00 00 00 00 
1442   095B 00 00 00 00 
1442   095F 00 00 00 00 
1442   0963 00 00 00 00 
1442   0967 00 00 00 00 
1442   096B 00 00 00 00 
1442   096F 00 00 00 00 
1442   0973 00 00 00 00 
1442   0977 00 00 00 00 
1442   097B 00 00 00 00 
1442   097F 00 00 00 00 
1442   0983 00 00 00 00 
1442   0987 00 00 00 00 
1442   098B 00 00 00 00 
1442   098F 00 00 00 00 
1442   0993 00 00 00 00 
1442   0997 00 00 00 00 
1442   099B 00 00 00 00 
1442   099F 00 00 00 00 
1442   09A3 00 00 00 00 
1442   09A7 00 00 00 00 
1442   09AB 00 00 00 00 
1442   09AF 00 00 00 00 
1442   09B3 00 00 00 00 
1442   09B7 00 00 00 00 
1442   09BB 00 00 00 00 
1442   09BF 00 00 00 00 
1442   09C3 00 00 00 00 
1442   09C7 00 00 00 00 
1442   09CB 00 00 00 00 
1442   09CF 00 00 00 00 
1442   09D3 00 00 00 00 
1442   09D7 00 00 00 00 
1442   09DB 00 00 00 00 
1442   09DF 00 00 00 00 
1443   09E3             
1444   09E3             keywords:
1445   09E3 D9 05       	.dw cmd_mkfs
1446   09E5 6D 6B 66 73 	.db "mkfs", 0, 0, 0, 0
1446   09E9 00 00 00 00 
1447   09ED             	
1448   09ED 75 00       	.dw cmd_ps
1449   09EF 70 73 00 00 	.db "ps", 0, 0, 0, 0, 0, 0
1449   09F3 00 00 00 00 
1450   09F7             	
1451   09F7 12 06       	.dw cmd_ls
1452   09F9 6C 73 00 00 	.db "ls", 0, 0, 0, 0, 0, 0
1452   09FD 00 00 00 00 
1453   0A01 F7 05       	.dw cmd_cd
1454   0A03 63 64 00 00 	.db "cd", 0, 0, 0, 0, 0, 0
1454   0A07 00 00 00 00 
1455   0A0B             	
1456   0A0B 6C 00       	.dw cmd_primer
1457   0A0D 70 72 69 6D 	.db "primer", 0, 0
1457   0A11 65 72 00 00 
1458   0A15             	
1459   0A15 7B 00       	.dw cmd_en
1460   0A17 65 6E 69 00 	.db "eni", 0, 0, 0, 0, 0
1460   0A1B 00 00 00 00 
1461   0A1F             
1462   0A1F 84 00       	.dw cmd_fwb
1463   0A21 66 77 62 00 	.db "fwb", 0, 0, 0, 0, 0
1463   0A25 00 00 00 00 
1464   0A29 87 00       	.dw cmd_fwk
1465   0A2B 66 77 6B 00 	.db "fwk", 0, 0, 0, 0, 0
1465   0A2F 00 00 00 00 
1466   0A33             	
1467   0A33 7E 00       	.dw cmd_fork
1468   0A35 66 6F 72 6B 	.db "fork", 0, 0, 0, 0
1468   0A39 00 00 00 00 
1469   0A3D             	
1470   0A3D 5F 00       	.dw cmd_test
1471   0A3F 74 65 73 74 	.db "test", 0, 0, 0, 0
1471   0A43 00 00 00 00 
1472   0A47 E1 05       	.dw cmd_fs_space
1473   0A49 66 73 73 00 	.db "fss", 0, 0, 0, 0, 0	
1473   0A4D 00 00 00 00 
1474   0A51             		
1475   0A51 7E 00       	.dw cmd_fork
1476   0A53 66 6F 72 6B 	.db "fork", 0, 0, 0, 0
1476   0A57 00 00 00 00 
1477   0A5B             		
1478   0A5B 54 01       	.dw mem_dump
1479   0A5D 64 6D 70 00 	.db "dmp", 0, 0, 0, 0, 0
1479   0A61 00 00 00 00 
1480   0A65 8A 00       	.dw loader
1481   0A67 6C 64 00 00 	.db "ld", 0, 0, 0, 0, 0, 0
1481   0A6B 00 00 00 00 
1482   0A6F ED 00       	.dw call_address
1483   0A71 63 61 6C 6C 	.db "call", 0, 0, 0, 0
1483   0A75 00 00 00 00 
1484   0A79             	
1485   0A79 A3 00       	.dw loadcall
1486   0A7B 6C 63 00 00 	.db "lc", 0, 0, 0, 0, 0, 0
1486   0A7F 00 00 00 00 
1487   0A83             	
1488   0A83 4F 06       	.dw cmd_cat
1489   0A85 63 61 74 00 	.db "cat", 0, 0, 0, 0, 0
1489   0A89 00 00 00 00 
1490   0A8D             	
1491   0A8D 6B 06       	.dw cmd_rm
1492   0A8F 72 6D 00 00 	.db "rm", 0, 0, 0, 0, 0, 0
1492   0A93 00 00 00 00 
1493   0A97             	
1494   0A97 39 06       	.dw cmd_mkbin
1495   0A99 6D 6B 62 69 	.db "mkbin", 0, 0, 0
1495   0A9D 6E 00 00 00 
1496   0AA1 2B 06       	.dw cmd_mktxt
1497   0AA3 6D 6B 74 78 	.db "mktxt", 0, 0, 0
1497   0AA7 74 00 00 00 
1498   0AAB             	
1499   0AAB E9 05       	.dw cmd_mkdir
1500   0AAD 6D 6B 64 69 	.db "mkdir", 0, 0, 0
1500   0AB1 72 00 00 00 
1501   0AB5 5D 06       	.dw cmd_rmdir
1502   0AB7 72 6D 64 69 	.db "rmdir", 0, 0, 0
1502   0ABB 72 00 00 00 
1503   0ABF             	
1504   0ABF 79 06       	.dw cmd_chmod
1505   0AC1 63 68 6D 6F 	.db "chmod", 0, 0, 0
1505   0AC5 64 00 00 00 
1506   0AC9 7A 06       	.dw cmd_mv
1507   0ACB 6D 76 00 00 	.db "mv", 0, 0, 0, 0, 0, 0
1507   0ACF 00 00 00 00 
1508   0AD3 7A 06       	.dw cmd_mv
1509   0AD5 72 6E 00 00 	.db "rn", 0, 0, 0, 0, 0, 0
1509   0AD9 00 00 00 00 
1510   0ADD             		
1511   0ADD 47 06       	.dw cmd_pwd
1512   0ADF 70 77 64 00 	.db "pwd", 0, 0, 0, 0, 0
1512   0AE3 00 00 00 00 
1513   0AE7             	
1514   0AE7 DF 04       	.dw cmd_printdate
1515   0AE9 64 61 74 00 	.db "dat", 0, 0, 0, 0, 0
1515   0AED 00 00 00 00 
1516   0AF1 50 05       	.dw cmd_setdate
1517   0AF3 73 64 61 74 	.db "sdat", 0, 0, 0, 0
1517   0AF7 00 00 00 00 
1518   0AFB             	
1519   0AFB 00 00       	.dw 0
1520   0AFD 00 00       	.db 0, 0
1521   0AFF             
1522   0AFF 01 00       table_power:			.dw 1
1523   0B01 0A 00       					.dw 10
1524   0B03 64 00       					.dw 100
1525   0B05 E8 03       					.dw 1000
1526   0B07 10 27       					.dw 10000
1527   0B09 10 27       					.dw 10000
1528   0B0B             
1529   0B0B 2D 64       file_attrib_d:		.db "-d"
1530   0B0D 2D 72       file_attrib_r:		.db "-r"
1531   0B0F 2D 77       file_attrib_w:		.db "-w"
1532   0B11 2D 78       file_attrib_x:		.db "-x"	
1533   0B13             
1534   0B13 20 74 6F 74 s_total_blocks:		.db " total blocks", 0
1534   0B17 61 6C 20 62 
1534   0B1B 6C 6F 63 6B 
1534   0B1F 73 00 
1535   0B21 20 66 72 65 s_free_blocks:		.db " free blocks", 0
1535   0B25 65 20 62 6C 
1535   0B29 6F 63 6B 73 
1535   0B2D 00 
1536   0B2E 20 75 73 65 s_used_blocks:		.db " used blocks", 0	
1536   0B32 64 20 62 6C 
1536   0B36 6F 63 6B 73 
1536   0B3A 00 
1537   0B3B 62 6C 6F 63 s_block_size:			.db "block size: ", 0
1537   0B3F 6B 20 73 69 
1537   0B43 7A 65 3A 20 
1537   0B47 00 
1538   0B48 20 62 79 74 s_bytes:				.db " bytes", 0		
1538   0B4C 65 73 00 
1539   0B4F             				
1540   0B4F 30 31 32 33 s_hex_digits:			.db "0123456789ABCDEF"	
1540   0B53 34 35 36 37 
1540   0B57 38 39 41 42 
1540   0B5B 43 44 45 46 
1541   0B5F             
1542   0B5F 0A          s_nl_2:				.db "\n"
1543   0B60 0A 0D 00    s_nl_1:				.db "\n\r", 0
1544   0B63             
1545   0B63 25 20 00    s_dataentry:			.db "% ", 0
1546   0B66 6F 72 69 67 s_origin_addr:		.db "origin: ", 0
1546   0B6A 69 6E 3A 20 
1546   0B6E 00 
1547   0B6F             				
1548   0B6F 0A 0D 70 61 s_pw:				.db "\n\rpassword: ", 0
1548   0B73 73 73 77 6F 
1548   0B77 72 64 3A 20 
1548   0B7B 00 
1549   0B7C             
1550   0B7C             
1551   0B7C             
1552   0B7C 00 00       progress_count: 		.dw 0
1553   0B7E             				
1554   0B7E             
1555   0B7E             
1556   0B7E 59 65 61 72 s_set_year:			.db "Year: ", 0
1556   0B82 3A 20 00 
1557   0B85 4D 6F 6E 74 s_set_month:			.db "Month: ", 0
1557   0B89 68 3A 20 00 
1558   0B8D 44 61 79 3A s_set_day:			.db "Day: ", 0
1558   0B91 20 00 
1559   0B93 57 65 65 6B s_set_week:			.db "Weekday: ", 0
1559   0B97 64 61 79 3A 
1559   0B9B 20 00 
1560   0B9D 48 6F 75 72 s_set_hours:			.db "Hours: ", 0
1560   0BA1 73 3A 20 00 
1561   0BA5 4D 69 6E 75 s_set_minutes:		.db "Minutes: ", 0
1561   0BA9 74 65 73 3A 
1561   0BAD 20 00 
1562   0BAF 53 65 63 6F s_set_seconds:		.db "Seconds: ", 0
1562   0BB3 6E 64 73 3A 
1562   0BB7 20 00 
1563   0BB9             
1564   0BB9 20 20 20 00 s_months:			.db "   ", 0
1565   0BBD 4A 61 6E 00 					.db "Jan", 0
1566   0BC1 46 65 62 00 					.db "Feb", 0
1567   0BC5 4D 61 72 00 					.db "Mar", 0
1568   0BC9 41 70 72 00 					.db "Apr", 0
1569   0BCD 4D 61 79 00 					.db "May", 0
1570   0BD1 4A 75 6E 00 					.db "Jun", 0
1571   0BD5 4A 75 6C 00 					.db "Jul", 0
1572   0BD9 41 75 67 00 					.db "Aug", 0
1573   0BDD 53 65 70 00 					.db "Sep", 0
1574   0BE1 4F 63 74 00 					.db "Oct", 0
1575   0BE5 4E 6F 76 00 					.db "Nov", 0
1576   0BE9 44 65 63 00 					.db "Dec", 0
1577   0BED             				
1578   0BED 53 75 6E 00 s_week:				.db "Sun", 0 
1579   0BF1 4D 6F 6E 00 					.db "Mon", 0 
1580   0BF5 54 75 65 00 					.db "Tue", 0 
1581   0BF9 57 65 64 00 					.db "Wed", 0 
1582   0BFD 54 68 75 00 					.db "Thu", 0 
1583   0C01 46 72 69 00 					.db "Fri", 0 
1584   0C05 53 61 74 00 					.db "Sat", 0
1585   0C09             
1586   0C09 70 72 6F 63 s_procname:			.db "process name: ", 0
1586   0C0D 65 73 73 20 
1586   0C11 6E 61 6D 65 
1586   0C15 3A 20 00 
1587   0C18             
1588   0C18 3E 00       s_angle:				.db ">", 0
1589   0C1A 2A 00       s_star: 				.db "*", 0				
1590   0C1C 2F 00       s_slash: 			.db "/", 0
1591   0C1E 30 78 00    s_hex:				.db "0x", 0
1592   0C21             
1593   0C21 4F 4B 00    s_OK:				.db "OK", 0
1594   0C24             
1595   0C24 0A 0D       s_welcome:			.db "\n\r"
1596   0C26 57 65 6C 63 					.db "Welcome to Sol-OS ver. 0.1\n\r", 0
1596   0C2A 6F 6D 65 20 
1596   0C2E 74 6F 20 53 
1596   0C32 6F 6C 2D 4F 
1596   0C36 53 20 76 65 
1596   0C3A 72 2E 20 30 
1596   0C3E 2E 31 0A 0D 
1596   0C42 00 
1597   0C43             	
1598   0C43 00          shell_disk_buffer:			.db 0			; this is actually a long buffer for disk data reads/writes
1599   0C44             
1600   0C44             .endtasm: Number of errors = 0
